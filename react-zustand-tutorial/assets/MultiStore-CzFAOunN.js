import{j as t}from"./index-BWM6UHr8.js";import{c as u,C as p}from"./ComponentTemplate-ClBHhBQ8.js";const d=u(r=>({items:[],totalQty:0,totalPrice:0,addItem:i=>r(a=>{const c=a.items.find(s=>s.id===i.id);let n;c?n=a.items.map(s=>s.id===i.id?{...s,qty:s.qty+1}:s):n=[...a.items,{...i,qty:1}];const o=n.reduce((s,e)=>s+e.qty,0),l=n.reduce((s,e)=>s+e.price*e.qty,0);return{items:n,totalQty:o,totalPrice:l}}),removeItem:i=>r(a=>{const c=a.items.filter(l=>l.id!==i),n=c.reduce((l,s)=>l+s.qty,0),o=c.reduce((l,s)=>l+s.price*s.qty,0);return{items:c,totalQty:n,totalPrice:o}}),changeQty:(i,a)=>r(c=>{const n=c.items.map(s=>s.id===i?{...s,qty:Math.max(1,a)}:s),o=n.reduce((s,e)=>s+e.qty,0),l=n.reduce((s,e)=>s+e.price*e.qty,0);return{items:n,totalQty:o,totalPrice:l}}),clear:()=>r({items:[],totalQty:0,totalPrice:0})})),x=()=>{const r=d(e=>e.items),i=d(e=>e.totalQty),a=d(e=>e.totalPrice),c=d(e=>e.addItem),n=d(e=>e.removeItem),o=d(e=>e.changeQty),l=d(e=>e.clear),s=()=>{const e=Math.floor(Math.random()*1e3);c({id:e,title:`商品${e}`,price:19.9})};return t.jsxs("div",{className:"space-y-3",children:[t.jsxs("div",{className:"flex gap-2",children:[t.jsx("button",{className:"px-3 py-1 bg-green-600 text-white rounded",onClick:s,children:"添加商品"}),t.jsx("button",{className:"px-3 py-1 bg-gray-600 text-white rounded",onClick:l,children:"清空"})]}),t.jsxs("div",{className:"text-sm text-gray-700",children:["合计：",i," 件，¥ ",a.toFixed(2)]}),t.jsxs("ul",{className:"divide-y rounded border",children:[r.map(e=>t.jsxs("li",{className:"flex items-center justify-between p-2 text-sm",children:[t.jsxs("div",{children:[t.jsx("div",{className:"font-medium",children:e.title}),t.jsxs("div",{className:"text-gray-500",children:["¥ ",e.price," × ",e.qty]})]}),t.jsxs("div",{className:"flex items-center gap-2",children:[t.jsx("button",{className:"px-2 py-1 bg-gray-200 rounded",onClick:()=>o(e.id,e.qty-1),children:"-"}),t.jsx("span",{className:"w-6 text-center",children:e.qty}),t.jsx("button",{className:"px-2 py-1 bg-gray-200 rounded",onClick:()=>o(e.id,e.qty+1),children:"+"}),t.jsx("button",{className:"px-2 py-1 bg-red-600 text-white rounded",onClick:()=>n(e.id),children:"删除"})]})]},e.id)),r.length===0&&t.jsx("li",{className:"p-3 text-gray-500 text-sm",children:"暂无商品"})]})]})},m=u(r=>({user:null,login:i=>r({user:{...i,loggedIn:!0}}),logout:()=>r({user:null}),updateName:i=>r(a=>({user:a.user?{...a.user,name:i}:a.user}))})),y=()=>{const r=m(o=>o.user),i=m(o=>o.login),a=d(o=>o.clear),c=d(o=>o.items),n=()=>{if(!r){alert("请先登录再结算");return}if(c.length===0){alert("购物车为空");return}alert(`用户 ${r.name} 结算成功，共 ${c.length} 件商品`),a()};return t.jsxs("div",{className:"space-y-3",children:[t.jsxs("div",{className:"text-sm text-gray-700",children:["登录状态：",r?`已登录 (${r.name})`:"未登录"]}),t.jsxs("div",{className:"flex gap-2",children:[!r&&t.jsx("button",{className:"px-3 py-1 bg-blue-600 text-white rounded",onClick:()=>i({id:1,name:"Alice",email:"alice@example.com"}),children:"一键登录"}),t.jsx("button",{className:"px-3 py-1 bg-purple-600 text-white rounded",onClick:n,children:"安全结算"})]})]})},g=()=>{const r=m(o=>o.user),i=m(o=>o.login),a=m(o=>o.logout),c=m(o=>o.updateName),n=()=>{i({id:1,name:"Alice",email:"alice@example.com"})};return t.jsxs("div",{className:"space-y-3",children:[t.jsxs("div",{className:"text-sm text-gray-700",children:["当前用户：",r?`${r.name} (${r.email})`:"未登录"]}),t.jsxs("div",{className:"flex gap-2",children:[t.jsx("button",{className:"px-3 py-1 bg-blue-600 text-white rounded",onClick:n,children:"登录"}),t.jsx("button",{className:"px-3 py-1 bg-gray-600 text-white rounded",onClick:a,children:"登出"}),t.jsx("button",{className:"px-3 py-1 bg-indigo-600 text-white rounded",onClick:()=>c("Alice Renamed"),disabled:!r,children:"修改名称"})]})]})},v=()=>t.jsx(p,{title:"多 Store 管理",description:"基于领域划分（Domain-Driven）的多 store 管理实践。通过将用户、购物车等不同领域的状态拆分到独立的 store，提高模块边界清晰度、可维护性与可扩展性，并演示跨 store 的组合与协作。",overview:[{title:"核心概念",items:["按领域拆分：每个 store 聚焦单一职责（User、Cart 等）","最小共享：仅暴露必要的 state 与 actions，减少耦合","选择器优先：组件订阅使用稳定的 primitive 选择器，避免无谓重渲染","跨 store 协作：在组件层组合多个 store，而非在 store 内相互引用","不可变更新：统一用 set((s)=>newState) 返回新引用，便于调试与回溯","稳定接口：selectXxx 与 action 命名语义化，跨页复用更可靠"]},{title:"主要优势",items:["边界清晰，代码更易读、更易测试","更好的可维护性与演进性，按域独立迭代","渲染性能更可控，订阅粒度更细","便于与中间件（persist/devtools/logger）分别集成","团队协作更顺畅：按域分工，冲突更少","迁移/替换成本低：可逐域替换实现"]},{title:"适用场景",items:["中大型项目的模块化状态管理","需要多个团队/多人并行开发的项目","跨页面共享但边界明确的业务域（用户、购物车、权限等）","需要渐进式组合与替换 store 的场景","需要按环境/平台差异化配置中间件的场景（Web/Native）","复杂页面需要拆分渲染与订阅边界的场景"]},{title:"注意事项",items:["避免在 store 内直接依赖其它 store，优先在组件层组合","保持 actions 简单纯净，避免副作用相互污染","选择器返回稳定的原始值，避免返回新对象导致频繁渲染","必要时为单个 store 分别配置中间件与持久化策略"]}],examples:[{title:"用户 Store（登录/登出/改名）",component:t.jsx(g,{}),description:"独立的用户域 store，管理登录状态与基本资料。",observationPoints:["使用选择器仅订阅 user 字段，避免无关渲染","actions 以领域动词命名：login/logout/updateName","登录后 user.loggedIn=true，登出置为 null，状态转换清晰","修改名称只影响 user.name，不触发与之无关的组件重渲染","DevTools 中可直观看到 action 与状态轨迹，便于回溯","确保选择器返回原始值（如 boolean）而非新对象"],keyPoints:["单一职责：仅处理用户域状态","可与其它 store 并行演进，互不影响","接口稳定：selectUser/selectIsLoggedIn 语义清晰","不可变更新：set((s)=>({...s,user:...})) 便于调试","类型安全：User 与 StoreState 明确字段边界"],commonTraps:["在 store 内引用其它 store 导致依赖环","在选择器中返回新对象，造成频繁重渲染","将敏感信息（token）直接放入可见 state 而非受控持久化","在 action 中做过多 UI/副作用逻辑，导致职责不清"],solutions:["在组件层组合多个 store 的数据与行为","选择器返回原始值或稳定引用，必要时使用浅比较","敏感信息通过受控中间件与 partialize 精准持久化","将副作用放到组件/useEffect 或专用服务层，action 保持纯粹"]},{title:"购物车 Store（增删改查与合计）",component:t.jsx(x,{}),description:"购物项的增删改与数量调整，并计算总数与总价。",observationPoints:["使用不可变更新，确保可预测渲染","合计由 state 派生，保持源数据与视图分离","增删改会同步维护 totalQty/totalPrice，读视图无需再计算","订阅 items 与 totals 在组件中按需拆分，降低重渲染","changeQty 做边界保护（最小为 1），防止非法值","删除商品后 totals 保持一致性"],keyPoints:["选择器返回原始类型或稳定结构","总价/总数在更新时同步计算，组件读取更简单","以 id 为 key 做不可变映射更新，避免原地修改","为价格展示使用格式化，避免在 render 中做昂贵计算","清空操作一次性重置 items 与 totals，保持状态完整"],commonTraps:["直接在组件中计算总价导致重复计算与不一致","选择器返回新对象（如 {qty,price}）导致无限渲染","变更数量允许 0 或负数导致展示异常","删除逻辑只改 items 未同步 totals"],solutions:["在 store 更新中集中计算 totals，暴露给组件","分别订阅 totalQty/totalPrice 两个原始值，避免新对象","在 changeQty 做 Math.max(1, qty) 防御","统一通过 set((s)=>newState) 返回新引用，保持一致性"],importantTips:["避免选择器返回新对象/新数组，可分别订阅 totalQty/totalPrice","价格展示使用格式化函数，避免在 render 中做复杂计算"]},{title:"跨 Store 协作（登录后安全结算）",component:t.jsx(y,{}),description:"在组件层组合 userStore 与 cartStore，实现“先登录再结算”的跨域协作流程。",observationPoints:["组件订阅两个 store 的最少字段：user 与 items","动作顺序控制在组件中完成，store 保持纯粹","登陆校验与购物车空校验拆分，保证提示更准确","结算成功后统一清空购物车，流程闭环","只在组件层进行跨域读取与行为编排"],keyPoints:["跨 store 组合在组件层实施，避免 store 互相依赖","将流程拆分为若干可测试的小函数（校验/执行/收尾）","避免在 store 中隐藏读取其它 store 的状态","对外只暴露必要的 actions，减少耦合面"],commonTraps:["在 store 内直接读取其它 store 导致强耦合","在选择器内读取另一个 store 数据导致订阅错乱","结算后未清空购物车导致状态不一致","将弹窗/路由等 UI 副作用写入 store，导致复用困难"],solutions:["通过 props/局部函数组织流程，在组件层整合","把跨域读取放到组件 effect/事件中，传参给 action","结算成功后调用 cart.clear()，在组件层收尾","UI 副作用保持在组件中，store 只做数据与纯逻辑"],importantTips:["跨 store 只在组件层组合，避免在 store 内部相互引入","将流程顺序（登录→校验→结算）显式编码，便于维护"]}],tutorial:{concepts:["多 store 的边界即领域边界，每个 store 仅负责本域的状态与行为","组件通过多个选择器同时订阅不同 store 的最小必要数据","跨 store 协作在组件层编排流程而非 store 间调用"],steps:["定义类型与领域模型：User、CartItem 等","为每个领域创建独立 store，并导出选择器","在组件中组合多个 store 的选择器与 actions 实现业务流程","按需为单个 store 配置中间件（persist/devtools 等）","对跨 store 流程写出伪代码/流程图再实现，降低返工"],tips:["保持 actions 命名语义化，避免含糊的 update/patch 等","为高频渲染组件提供稳定的 primitive 选择器","将跨域流程逻辑放在组件中，降低 store 间耦合","为 totals/派生值提供专用选择器，避免组件重复计算","通过单元测试验证关键选择器的纯函数与稳定性"]},interview:{questions:[{question:"为什么推荐在组件层进行跨 store 协作，而不是在 store 内部互相调用？",answer:"组件层组合使得依赖方向更清晰、可测试性更好，同时避免 store 间环状依赖与隐藏的副作用传播。"},{question:"如何控制多 store 方案下的渲染性能？",answer:"通过精细的选择器只订阅最小必要数据，返回原始值或稳定引用，必要时拆组件。"},{question:"跨 store 的错误做法有哪些？",answer:"在 store 内直接读取或修改其它 store；在选择器中组合两个 store；在 action 中隐藏跨域副作用。应在组件层组织流程并显式传参。"},{question:"如何为多 store 场景设计中间件与持久化？",answer:"按域分别配置 devtools/persist/logger，并通过 partialize 精准持久化必要字段，避免跨域共享同一存储命名空间。"}],keyPoints:["领域拆分、单一职责、低耦合高内聚","组件层编排跨域流程，store 保持纯粹","选择器稳定性与不可变更新确保渲染可控","中间件与持久化按域配置，partialize 精准化"]},bestPractices:{dos:["为每个领域独立建模与命名，保持 actions 语义清晰","导出选择器，限制组件订阅范围","在组件层组合多个 store，避免 store 间直接调用","selector 只返回原始值或稳定引用（必要时使用 shallow）","关键选择器/流程编写单元测试与可视化调试（devtools）"],donts:["不要在 store 内读取/更新其他 store 的状态","不要返回新对象作为选择器结果导致频繁渲染","不要在选择器中做副作用或跨域读取","不要在 action 中隐藏跨域的状态写入"],patterns:["DDD 领域拆分 + 组件层编排","选择器优先 + 不可变更新","按域配置中间件 + partialize 精准持久化"]}});export{v as default};
