var C=Object.defineProperty;var E=(s,t,n)=>t in s?C(s,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):s[t]=n;var u=(s,t,n)=>E(s,typeof t!="symbol"?t+"":t,n);import{j as e,r as a}from"./index-Cnne2xOM.js";import{C as L}from"./ComponentTemplate-iqsAHbUA.js";class R{constructor(t={}){u(this,"config");u(this,"queue",[]);u(this,"networkStatus",{online:navigator.onLine});u(this,"syncTimer");u(this,"listeners",new Set);u(this,"queueListeners",new Set);u(this,"stats",{queued:0,synced:0,failed:0,retries:0});u(this,"handleOnline",()=>{this.networkStatus.online=!0,this.notifyNetworkListeners(),this.config.autoSync&&this.syncQueue()});u(this,"handleOffline",()=>{this.networkStatus.online=!1,this.notifyNetworkListeners()});this.config={maxQueueSize:100,maxRetries:3,retryDelay:1e3,storageKey:"offline_requests",autoSync:!0,syncInterval:5e3,...t},this.initializeNetworkMonitoring(),this.loadQueue(),this.config.autoSync&&this.startAutoSync()}async enqueue(t){const n={id:this.generateId(),timestamp:Date.now(),retryCount:0,maxRetries:t.maxRetries||this.config.maxRetries,...t};return this.queue.length>=this.config.maxQueueSize&&(this.queue.sort((r,d)=>d.priority-r.priority),this.queue.pop()),this.queue.push(n),this.queue.sort((r,d)=>d.priority-r.priority),this.stats.queued++,await this.saveQueue(),this.notifyQueueListeners(),this.networkStatus.online&&this.syncQueue(),n.id}async dequeue(t){const n=this.queue.findIndex(r=>r.id===t);return n===-1?!1:(this.queue.splice(n,1),await this.saveQueue(),this.notifyQueueListeners(),!0)}getQueue(){return[...this.queue]}async clearQueue(){this.queue=[],await this.saveQueue(),this.notifyQueueListeners()}async syncQueue(){if(!this.networkStatus.online||this.queue.length===0)return;const t=[...this.queue];for(const n of t)try{await this.executeRequest(n),await this.dequeue(n.id),this.stats.synced++}catch(r){await this.handleRequestError(n,r)}}getNetworkStatus(){return{...this.networkStatus}}getStats(){return{...this.stats,queueSize:this.queue.length,online:this.networkStatus.online}}resetStats(){this.stats={queued:0,synced:0,failed:0,retries:0}}addNetworkListener(t){this.listeners.add(t)}removeNetworkListener(t){this.listeners.delete(t)}addQueueListener(t){this.queueListeners.add(t)}removeQueueListener(t){this.queueListeners.delete(t)}destroy(){this.syncTimer&&clearInterval(this.syncTimer),window.removeEventListener("online",this.handleOnline),window.removeEventListener("offline",this.handleOffline),this.listeners.clear(),this.queueListeners.clear()}initializeNetworkMonitoring(){if(window.addEventListener("online",this.handleOnline),window.addEventListener("offline",this.handleOffline),"connection"in navigator){const t=navigator.connection;t&&(this.updateNetworkInfo(t),t.addEventListener("change",()=>{this.updateNetworkInfo(t)}))}}updateNetworkInfo(t){this.networkStatus={...this.networkStatus,effectiveType:t.effectiveType,downlink:t.downlink,rtt:t.rtt},this.notifyNetworkListeners()}notifyNetworkListeners(){this.listeners.forEach(t=>{try{t(this.networkStatus)}catch(n){console.error("Network listener error:",n)}})}notifyQueueListeners(){this.queueListeners.forEach(t=>{try{t([...this.queue])}catch(n){console.error("Queue listener error:",n)}})}async executeRequest(t){const{url:n,method:r,headers:d,body:l}=t,h={method:r,headers:{"Content-Type":"application/json",...d}};l&&r!=="GET"&&r!=="HEAD"&&(h.body=typeof l=="string"?l:JSON.stringify(l));const o=await fetch(n,h);if(!o.ok)throw new Error(`HTTP ${o.status}: ${o.statusText}`);return o}async handleRequestError(t,n){if(t.retryCount++,this.stats.retries++,t.retryCount>=t.maxRetries)await this.dequeue(t.id),this.stats.failed++,console.error(`Request ${t.id} failed after ${t.retryCount} retries:`,n);else{const r=this.queue.findIndex(d=>d.id===t.id);r!==-1&&(this.queue[r]=t,await this.saveQueue())}}startAutoSync(){this.syncTimer=setInterval(()=>{this.networkStatus.online&&this.syncQueue()},this.config.syncInterval)}generateId(){return`${Date.now()}_${Math.random().toString(36).substr(2,9)}`}async saveQueue(){try{localStorage.setItem(this.config.storageKey,JSON.stringify(this.queue))}catch(t){console.error("Failed to save offline queue:",t)}}loadQueue(){try{const t=localStorage.getItem(this.config.storageKey);t&&(this.queue=JSON.parse(t),this.notifyQueueListeners())}catch(t){console.error("Failed to load offline queue:",t),this.queue=[]}}}const T=({manager:s})=>{const[t,n]=a.useState(s.getNetworkStatus());a.useEffect(()=>{const l=h=>{n(h)};return s.addNetworkListener(l),()=>s.removeNetworkListener(l)},[s]);const r=l=>l?"text-green-600":"text-red-600",d=l=>l?"bg-green-100":"bg-red-100";return e.jsxs("div",{className:`p-4 rounded-lg ${d(t.online)}`,children:[e.jsxs("div",{className:"flex items-center space-x-2 mb-2",children:[e.jsx("div",{className:`w-3 h-3 rounded-full ${t.online?"bg-green-500":"bg-red-500"}`}),e.jsx("span",{className:`font-medium ${r(t.online)}`,children:t.online?"在线":"离线"})]}),t.online&&e.jsxs("div",{className:"text-sm space-y-1",children:[t.effectiveType&&e.jsxs("div",{children:["连接类型: ",t.effectiveType]}),t.downlink&&e.jsxs("div",{children:["下行速度: ",t.downlink," Mbps"]}),t.rtt&&e.jsxs("div",{children:["往返时间: ",t.rtt," ms"]})]})]})},O=()=>{const[s]=a.useState(()=>new R({maxQueueSize:20,maxRetries:3,autoSync:!0,syncInterval:3e3})),[t,n]=a.useState([]),[r,d]=a.useState(s.getStats()),[l,h]=a.useState("https://jsonplaceholder.typicode.com/posts"),[o,p]=a.useState("POST"),[m,j]=a.useState(JSON.stringify({title:"Test Post",body:"Test content",userId:1},null,2)),[g,v]=a.useState("5"),[y,f]=a.useState(!1),c=a.useCallback(()=>{d(s.getStats())},[s]);a.useEffect(()=>{const i=Q=>{n(Q)};s.addQueueListener(i),n(s.getQueue());const x=setInterval(c,1e3);return()=>{s.removeQueueListener(i),clearInterval(x)}},[s,c]);const w=a.useCallback(async()=>{if(l){f(!0);try{let i;if(o!=="GET"&&o!=="HEAD"&&m.trim())try{i=JSON.parse(m)}catch{i=m}await s.enqueue({url:l,method:o,body:i,priority:parseInt(g)||5,metadata:{createdAt:new Date().toISOString(),userAgent:navigator.userAgent}}),c()}catch(i){alert(`添加请求失败: ${i instanceof Error?i.message:"未知错误"}`)}finally{f(!1)}}},[s,l,o,m,g,c]),b=a.useCallback(async()=>{f(!0);try{await s.syncQueue(),c()}catch(i){alert(`同步失败: ${i instanceof Error?i.message:"未知错误"}`)}finally{f(!1)}},[s,c]),N=a.useCallback(async()=>{try{await s.clearQueue(),c()}catch(i){alert(`清空队列失败: ${i instanceof Error?i.message:"未知错误"}`)}},[s,c]),S=a.useCallback(async i=>{try{await s.dequeue(i),c()}catch(x){alert(`删除请求失败: ${x instanceof Error?x.message:"未知错误"}`)}},[s,c]),q=a.useCallback(()=>{s.resetStats(),c()},[s,c]),k=a.useCallback(()=>{alert("请在浏览器开发者工具中切换到离线模式来测试离线功能")},[]);return a.useEffect(()=>()=>s.destroy(),[s]),e.jsx("div",{className:"space-y-4",children:e.jsxs("div",{className:"bg-white p-6 rounded-lg border",children:[e.jsx("h3",{className:"text-lg font-semibold mb-4",children:"离线请求队列管理"}),e.jsxs("div",{className:"grid grid-cols-1 lg:grid-cols-2 gap-6",children:[e.jsxs("div",{className:"space-y-4",children:[e.jsx(T,{manager:s}),e.jsxs("div",{children:[e.jsx("h4",{className:"font-medium text-gray-900 mb-2",children:"添加离线请求"}),e.jsxs("div",{className:"space-y-2",children:[e.jsx("input",{type:"text",value:l,onChange:i=>h(i.target.value),placeholder:"请求URL",className:"w-full p-2 border border-gray-300 rounded-md"}),e.jsxs("select",{value:o,onChange:i=>p(i.target.value),className:"w-full p-2 border border-gray-300 rounded-md",children:[e.jsx("option",{value:"GET",children:"GET"}),e.jsx("option",{value:"POST",children:"POST"}),e.jsx("option",{value:"PUT",children:"PUT"}),e.jsx("option",{value:"DELETE",children:"DELETE"}),e.jsx("option",{value:"PATCH",children:"PATCH"})]}),o!=="GET"&&o!=="HEAD"&&e.jsx("textarea",{value:m,onChange:i=>j(i.target.value),placeholder:"请求体（JSON格式）",className:"w-full p-2 border border-gray-300 rounded-md h-24"}),e.jsx("input",{type:"number",value:g,onChange:i=>v(i.target.value),placeholder:"优先级 (1-10)",min:"1",max:"10",className:"w-full p-2 border border-gray-300 rounded-md"}),e.jsx("button",{onClick:w,disabled:y||!l,className:"w-full px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-400",children:y?"添加中...":"添加到队列"})]})]}),e.jsxs("div",{className:"flex space-x-2",children:[e.jsx("button",{onClick:b,disabled:y,className:"flex-1 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:bg-gray-400",children:"手动同步"}),e.jsx("button",{onClick:k,className:"flex-1 px-4 py-2 bg-yellow-600 text-white rounded-md hover:bg-yellow-700",children:"模拟离线"})]}),e.jsxs("div",{className:"flex space-x-2",children:[e.jsx("button",{onClick:N,className:"flex-1 px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700",children:"清空队列"}),e.jsx("button",{onClick:q,className:"flex-1 px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700",children:"重置统计"})]})]}),e.jsxs("div",{className:"space-y-4",children:[e.jsxs("div",{children:[e.jsx("h4",{className:"font-medium text-gray-900 mb-2",children:"队列统计"}),e.jsxs("div",{className:"bg-gray-50 p-4 rounded-md space-y-2",children:[e.jsxs("div",{className:"flex justify-between",children:[e.jsx("span",{className:"text-sm text-gray-600",children:"队列大小:"}),e.jsx("span",{className:"text-sm font-medium",children:r.queueSize})]}),e.jsxs("div",{className:"flex justify-between",children:[e.jsx("span",{className:"text-sm text-gray-600",children:"已入队:"}),e.jsx("span",{className:"text-sm font-medium",children:r.queued})]}),e.jsxs("div",{className:"flex justify-between",children:[e.jsx("span",{className:"text-sm text-gray-600",children:"已同步:"}),e.jsx("span",{className:"text-sm font-medium text-green-600",children:r.synced})]}),e.jsxs("div",{className:"flex justify-between",children:[e.jsx("span",{className:"text-sm text-gray-600",children:"失败:"}),e.jsx("span",{className:"text-sm font-medium text-red-600",children:r.failed})]}),e.jsxs("div",{className:"flex justify-between",children:[e.jsx("span",{className:"text-sm text-gray-600",children:"重试次数:"}),e.jsx("span",{className:"text-sm font-medium text-orange-600",children:r.retries})]}),e.jsxs("div",{className:"flex justify-between",children:[e.jsx("span",{className:"text-sm text-gray-600",children:"网络状态:"}),e.jsx("span",{className:`text-sm font-medium ${r.online?"text-green-600":"text-red-600"}`,children:r.online?"在线":"离线"})]})]})]}),e.jsxs("div",{children:[e.jsx("h4",{className:"font-medium text-gray-900 mb-2",children:"请求队列"}),e.jsx("div",{className:"bg-gray-50 p-4 rounded-md max-h-80 overflow-y-auto",children:t.length===0?e.jsx("div",{className:"text-sm text-gray-500 text-center py-4",children:"队列为空"}):e.jsx("div",{className:"space-y-2",children:t.map((i,x)=>e.jsxs("div",{className:"p-3 bg-white rounded border",children:[e.jsxs("div",{className:"flex items-center justify-between mb-2",children:[e.jsxs("div",{className:"flex items-center space-x-2",children:[e.jsxs("span",{className:"text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded",children:["#",x+1]}),e.jsx("span",{className:"text-xs bg-gray-100 text-gray-800 px-2 py-1 rounded",children:i.method}),e.jsxs("span",{className:"text-xs bg-purple-100 text-purple-800 px-2 py-1 rounded",children:["优先级: ",i.priority]})]}),e.jsx("button",{onClick:()=>S(i.id),className:"px-2 py-1 text-xs bg-red-600 text-white rounded hover:bg-red-700",children:"删除"})]}),e.jsx("div",{className:"text-sm text-gray-700 mb-1 truncate",children:i.url}),e.jsxs("div",{className:"flex justify-between text-xs text-gray-500",children:[e.jsxs("span",{children:["重试: ",i.retryCount,"/",i.maxRetries]}),e.jsx("span",{children:new Date(i.timestamp).toLocaleTimeString()})]})]},i.id))})})]})]})]})]})})},A=()=>{const s={title:"离线请求管理器实现",language:"typescript",code:`// 离线请求管理器
class OfflineRequestManager {
  private config: OfflineConfig;
  private queue: OfflineRequest[] = [];
  private networkStatus: NetworkStatus = { online: navigator.onLine };

  constructor(config: Partial<OfflineConfig> = {}) {
    this.config = {
      maxQueueSize: 100,
      maxRetries: 3,
      retryDelay: 1000,
      storageKey: 'offline_requests',
      autoSync: true,
      syncInterval: 5000,
      ...config
    };

    this.initializeNetworkMonitoring();
    this.loadQueue();
  }

  // 添加请求到离线队列
  async enqueue(request: Omit<OfflineRequest, 'id' | 'timestamp' | 'retryCount'>): Promise<string> {
    const offlineRequest: OfflineRequest = {
      id: this.generateId(),
      timestamp: Date.now(),
      retryCount: 0,
      maxRetries: request.maxRetries || this.config.maxRetries,
      ...request
    };

    // 检查队列大小限制
    if (this.queue.length >= this.config.maxQueueSize) {
      this.queue.sort((a, b) => b.priority - a.priority);
      this.queue.pop();
    }

    this.queue.push(offlineRequest);
    this.queue.sort((a, b) => b.priority - a.priority);
    
    await this.saveQueue();
    
    // 如果在线，立即尝试同步
    if (this.networkStatus.online) {
      this.syncQueue();
    }

    return offlineRequest.id;
  }

  // 同步队列
  async syncQueue(): Promise<void> {
    if (!this.networkStatus.online || this.queue.length === 0) {
      return;
    }

    const requestsToSync = [...this.queue];
    
    for (const request of requestsToSync) {
      try {
        await this.executeRequest(request);
        await this.dequeue(request.id);
      } catch (error) {
        await this.handleRequestError(request, error);
      }
    }
  }

  // 初始化网络监控
  private initializeNetworkMonitoring(): void {
    window.addEventListener('online', this.handleOnline);
    window.addEventListener('offline', this.handleOffline);
  }

  private handleOnline = (): void => {
    this.networkStatus.online = true;
    if (this.config.autoSync) {
      this.syncQueue();
    }
  };

  private handleOffline = (): void => {
    this.networkStatus.online = false;
  };
}`,highlights:[20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70]};return e.jsx(L,{title:"离线请求处理",description:"实现离线环境下的请求队列管理，支持网络状态监控、自动同步和优先级处理。",overview:e.jsxs("div",{className:"space-y-4",children:[e.jsxs("div",{className:"bg-blue-50 p-6 rounded-lg",children:[e.jsx("h3",{className:"text-lg font-semibold text-blue-900 mb-3",children:"🔍 核心概念"}),e.jsxs("ul",{className:"space-y-2 text-blue-800",children:[e.jsxs("li",{children:[e.jsx("strong",{children:"离线队列:"})," 在网络不可用时暂存请求，待网络恢复后自动发送"]}),e.jsxs("li",{children:[e.jsx("strong",{children:"网络监控:"})," 实时监测网络状态变化，自动触发同步操作"]}),e.jsxs("li",{children:[e.jsx("strong",{children:"优先级管理:"})," 根据请求重要性确定处理顺序"]}),e.jsxs("li",{children:[e.jsx("strong",{children:"重试机制:"})," 失败请求的自动重试和错误处理"]})]})]}),e.jsxs("div",{className:"bg-green-50 p-6 rounded-lg",children:[e.jsx("h3",{className:"text-lg font-semibold text-green-900 mb-3",children:"✨ 主要优势"}),e.jsxs("ul",{className:"space-y-2 text-green-800",children:[e.jsxs("li",{children:[e.jsx("strong",{children:"用户体验:"})," 离线状态下仍可正常操作，无需等待网络"]}),e.jsxs("li",{children:[e.jsx("strong",{children:"数据完整性:"})," 确保重要操作不会因网络问题丢失"]}),e.jsxs("li",{children:[e.jsx("strong",{children:"自动恢复:"})," 网络恢复后自动同步待处理请求"]}),e.jsxs("li",{children:[e.jsx("strong",{children:"智能管理:"})," 优先级排序和队列大小控制"]})]})]}),e.jsxs("div",{className:"bg-yellow-50 p-6 rounded-lg",children:[e.jsx("h3",{className:"text-lg font-semibold text-yellow-900 mb-3",children:"🎯 适用场景"}),e.jsxs("ul",{className:"space-y-2 text-yellow-800",children:[e.jsxs("li",{children:[e.jsx("strong",{children:"移动应用:"})," 网络不稳定环境下的数据同步"]}),e.jsxs("li",{children:[e.jsx("strong",{children:"表单提交:"})," 重要表单数据的离线保存和提交"]}),e.jsxs("li",{children:[e.jsx("strong",{children:"数据上传:"})," 大文件或批量数据的断点续传"]}),e.jsxs("li",{children:[e.jsx("strong",{children:"实时同步:"})," 离线编辑内容的自动同步"]})]})]}),e.jsxs("div",{className:"bg-red-50 p-6 rounded-lg",children:[e.jsx("h3",{className:"text-lg font-semibold text-red-900 mb-3",children:"⚠️ 注意事项"}),e.jsxs("ul",{className:"space-y-2 text-red-800",children:[e.jsxs("li",{children:[e.jsx("strong",{children:"存储限制:"})," 注意本地存储的容量和性能限制"]}),e.jsxs("li",{children:[e.jsx("strong",{children:"数据冲突:"})," 处理离线期间可能产生的数据冲突"]}),e.jsxs("li",{children:[e.jsx("strong",{children:"安全考虑:"})," 敏感数据的本地存储安全性"]}),e.jsxs("li",{children:[e.jsx("strong",{children:"同步策略:"})," 合理设计同步时机和频率"]})]})]})]}),examples:[{title:"离线队列管理",component:e.jsx(O,{}),description:"演示离线请求的队列管理，包括添加、同步、优先级处理和网络状态监控。",observationPoints:["网络状态实时显示当前连接情况","离线时添加的请求会进入队列等待","网络恢复后会自动同步队列中的请求","请求按优先级排序，高优先级先处理","失败的请求会自动重试，达到上限后移除"],keyPoints:["离线队列使用本地存储持久化保存","网络状态变化会触发自动同步","支持手动同步和自动同步两种模式","队列大小有限制，会移除低优先级请求","提供详细的统计信息和操作历史"],commonTraps:["忘记处理网络状态变化事件","没有设置合理的队列大小限制","忽略请求失败后的重试机制","本地存储数据没有加密保护"],solutions:["监听online/offline事件和connection API","根据设备性能设置合适的队列大小","实现指数退避的重试策略","对敏感数据进行加密存储"],codeExample:s}],tutorial:{concepts:["离线处理是现代Web应用的重要特性","网络状态监控是离线处理的基础","请求队列需要持久化存储支持","优先级管理确保重要请求优先处理","重试机制提高请求成功率"],steps:["设计离线请求的数据结构","实现网络状态监控机制","创建请求队列管理器","添加本地存储持久化","实现自动同步和重试逻辑","设计优先级排序算法","添加统计和监控功能","处理边界情况和错误","优化性能和用户体验"],tips:["使用Service Worker可以实现更强大的离线功能","考虑使用IndexedDB存储大量离线数据","实现合理的冲突解决策略","提供离线状态的用户反馈","定期清理过期的离线数据","考虑数据压缩减少存储空间"]},interview:{questions:[{question:"如何实现Web应用的离线功能？",answer:"实现离线功能的主要方法：1) Service Worker：拦截网络请求，提供缓存和离线支持；2) Application Cache：已废弃的离线缓存方案；3) 本地存储：使用localStorage、IndexedDB等存储离线数据；4) 离线检测：监听online/offline事件；5) 请求队列：离线时暂存请求，在线时同步；6) 数据同步：实现增量同步和冲突解决。"},{question:"离线数据同步有哪些挑战？如何解决？",answer:"主要挑战和解决方案：1) 数据冲突：使用时间戳、版本号或操作日志解决；2) 网络不稳定：实现重试机制和断点续传；3) 存储限制：数据压缩、分页加载、定期清理；4) 安全性：数据加密、权限验证；5) 性能问题：增量同步、后台同步、优先级队列；6) 用户体验：离线提示、同步进度、冲突处理界面。"},{question:"Service Worker在离线处理中的作用是什么？",answer:"Service Worker的主要作用：1) 网络代理：拦截所有网络请求，可以返回缓存或自定义响应；2) 缓存管理：使用Cache API管理资源缓存；3) 后台同步：Background Sync API实现后台数据同步；4) 推送通知：接收服务器推送消息；5) 离线优先：实现离线优先的缓存策略；6) 更新机制：控制应用更新和缓存刷新。"},{question:"如何设计离线优先的应用架构？",answer:"离线优先架构设计要点：1) 数据层：本地数据库作为主要数据源，服务器作为同步源；2) 缓存策略：Cache First、Network First、Stale While Revalidate等；3) 同步机制：双向同步、冲突解决、增量更新；4) 状态管理：离线状态、同步状态、冲突状态；5) 用户界面：离线指示、同步进度、冲突解决；6) 错误处理：网络错误、存储错误、同步错误的处理。"}],keyPoints:["离线功能是现代Web应用的重要特性，提升用户体验","网络状态监控和请求队列是离线处理的核心组件","Service Worker提供了强大的离线和缓存能力","数据同步需要考虑冲突解决和一致性保证","离线存储要注意安全性和性能优化","用户界面要提供清晰的离线状态反馈"]},bestPractices:{dos:["实现渐进式的离线功能，从简单到复杂","提供清晰的离线状态指示和用户反馈","使用Service Worker实现强大的离线缓存","设计合理的数据同步和冲突解决策略","对离线存储的敏感数据进行加密","实现智能的缓存策略和更新机制","定期清理过期和无用的离线数据","测试各种网络条件下的应用表现"],donts:["不要忽略离线状态下的用户体验","不要在本地存储过多或过大的数据","不要忽略数据同步时的冲突处理","不要忘记处理存储配额超限的情况","不要在离线模式下执行不必要的操作","不要忽略离线数据的安全性问题","不要设计过于复杂的同步逻辑","不要忘记提供离线功能的降级方案"],patterns:["离线优先模式：本地数据为主，服务器同步为辅","缓存优先模式：优先使用缓存，网络作为备选","网络优先模式：优先使用网络，缓存作为备选","后台同步模式：使用Service Worker后台同步数据","增量同步模式：只同步变更的数据减少传输","冲突解决模式：最后写入获胜、合并策略等","队列模式：使用优先级队列管理离线请求","状态机模式：管理复杂的离线和同步状态"]}})};export{A as default};
