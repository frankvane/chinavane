var R=Object.defineProperty;var q=(a,e,s)=>e in a?R(a,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):a[e]=s;var m=(a,e,s)=>q(a,typeof e!="symbol"?e+"":e,s);import{r as o,j as t}from"./index-C7SuDyTR.js";import{C as z}from"./ComponentTemplate-BzrYXZsv.js";class P{constructor(e,s={}){m(this,"baseURL");m(this,"defaultOptions");this.baseURL=e,this.defaultOptions=s}async create(){return{id:this.generateId(),baseURL:this.baseURL,options:{...this.defaultOptions},created:Date.now(),lastUsed:Date.now(),requestCount:0,connected:!0,request:async(s,i={})=>{const c=`${this.baseURL}${s}`;return await fetch(c,{...this.defaultOptions,...i})}}}async validate(e){try{return!(!e||typeof e!="object"||!e.connected)}catch(s){return console.error("Connection validation failed:",s),!1}}async destroy(e){e&&typeof e=="object"&&(e.connected=!1)}async reset(e){e&&typeof e=="object"&&(e.lastUsed=Date.now(),e.requestCount=0)}generateId(){return Math.random().toString(36).substr(2,9)}}class D{constructor(e,s={}){m(this,"config");m(this,"factory");m(this,"connections",new Map);m(this,"waitingQueue",[]);m(this,"stats");m(this,"evictionTimer");m(this,"destroyed",!1);this.factory=e,this.config={maxSize:10,minSize:2,maxIdleTime:3e4,maxWaitTime:5e3,validateOnBorrow:!0,validateOnReturn:!1,testOnIdle:!0,evictionInterval:1e4,...s},this.stats=this.createInitialStats(),this.startEviction(),this.ensureMinConnections()}async borrowConnection(){if(this.destroyed)throw new Error("Pool has been destroyed");const e=Date.now();let s=await this.getIdleConnection();return s||(this.connections.size<this.config.maxSize?s=await this.createConnection():s=await this.waitForConnection(e)),this.config.validateOnBorrow&&!await this.factory.validate(s.connection)?(await this.destroyConnection(s),this.borrowConnection()):(s.borrowed=!0,s.lastUsed=Date.now(),s.borrowCount++,this.stats.totalBorrowed++,this.updateBorrowStats(Date.now()-e),this.updateStats(),s)}async returnConnection(e){if(!(this.destroyed||!this.connections.get(e.id))){if(this.config.validateOnReturn&&!await this.factory.validate(e.connection)){await this.destroyConnection(e);return}try{await this.factory.reset(e.connection)}catch(i){console.error("Failed to reset connection:",i),await this.destroyConnection(e);return}e.borrowed=!1,e.lastUsed=Date.now(),this.waitingQueue.length>0&&this.waitingQueue.shift().resolve(e),this.stats.totalReturned++,this.updateStats()}}getStats(){return{...this.stats}}getPoolState(){const e=Array.from(this.connections.values()).map(s=>({id:s.id,borrowed:s.borrowed,age:Date.now()-s.created,idleTime:Date.now()-s.lastUsed,borrowCount:s.borrowCount,errorCount:s.errorCount,valid:s.valid}));return{total:this.connections.size,active:e.filter(s=>s.borrowed).length,idle:e.filter(s=>!s.borrowed).length,connections:e}}async clear(){this.waitingQueue.forEach(s=>{s.reject(new Error("Pool cleared"))}),this.waitingQueue=[];const e=Array.from(this.connections.values()).map(s=>this.destroyConnection(s));await Promise.all(e),this.resetStats()}async destroy(){this.destroyed=!0,this.evictionTimer&&clearInterval(this.evictionTimer),await this.clear()}async warmUp(){const e=[];for(let s=this.connections.size;s<this.config.minSize;s++)e.push(this.createConnection());await Promise.all(e)}async getIdleConnection(){for(const e of this.connections.values())if(!e.borrowed){if(Date.now()-e.lastUsed>this.config.maxIdleTime){await this.destroyConnection(e);continue}if(this.config.testOnIdle&&!await this.factory.validate(e.connection)){await this.destroyConnection(e);continue}return e}return null}async createConnection(){try{const e=await this.factory.create(),s={id:this.generateId(),connection:e,created:Date.now(),lastUsed:Date.now(),borrowed:!1,valid:!0,borrowCount:0,errorCount:0};return this.connections.set(s.id,s),this.stats.totalCreated++,this.updateStats(),s}catch(e){throw console.error("Failed to create connection:",e),e}}async waitForConnection(e){return new Promise((s,i)=>{const c=setTimeout(()=>{const r=this.waitingQueue.findIndex(u=>u.resolve===s);r!==-1&&this.waitingQueue.splice(r,1),i(new Error("Connection wait timeout"))},this.config.maxWaitTime);this.waitingQueue.push({resolve:r=>{clearTimeout(c),s(r)},reject:r=>{clearTimeout(c),i(r)},timestamp:e})})}async destroyConnection(e){try{await this.factory.destroy(e.connection)}catch(s){console.error("Failed to destroy connection:",s)}this.connections.delete(e.id),this.stats.totalDestroyed++,this.updateStats()}startEviction(){this.evictionTimer=setInterval(()=>{this.evictIdleConnections(),this.ensureMinConnections()},this.config.evictionInterval)}async evictIdleConnections(){const e=Date.now(),s=[];for(const r of this.connections.values())r.borrowed||e-r.lastUsed>this.config.maxIdleTime&&s.push(r);const i=Math.max(0,this.config.minSize-(this.connections.size-s.length)),c=s.slice(i);for(const r of c)await this.destroyConnection(r)}async ensureMinConnections(){const e=this.connections.size;if(e<this.config.minSize){const s=[];for(let i=e;i<this.config.minSize;i++)s.push(this.createConnection());await Promise.all(s)}}updateBorrowStats(e){this.stats.borrowWaitTime=e,this.stats.avgBorrowTime=(this.stats.avgBorrowTime*(this.stats.totalBorrowed-1)+e)/this.stats.totalBorrowed,this.stats.maxBorrowTime=Math.max(this.stats.maxBorrowTime,e)}updateStats(){this.stats.totalConnections=this.connections.size,this.stats.activeConnections=Array.from(this.connections.values()).filter(i=>i.borrowed).length,this.stats.idleConnections=this.stats.totalConnections-this.stats.activeConnections;const e=Array.from(this.connections.values()).reduce((i,c)=>i+c.errorCount,0),s=Array.from(this.connections.values()).reduce((i,c)=>i+c.borrowCount,0);this.stats.errorRate=s>0?e/s:0}resetStats(){this.stats=this.createInitialStats()}createInitialStats(){return{totalConnections:0,activeConnections:0,idleConnections:0,totalBorrowed:0,totalReturned:0,totalCreated:0,totalDestroyed:0,borrowWaitTime:0,avgBorrowTime:0,maxBorrowTime:0,errorRate:0}}generateId(){return Math.random().toString(36).substr(2,9)}}const k=()=>{const[a]=o.useState(()=>{const n=new P("https://jsonplaceholder.typicode.com");return new D(n,{maxSize:5,minSize:2,maxIdleTime:3e4,maxWaitTime:5e3,validateOnBorrow:!0,evictionInterval:1e4})}),[e,s]=o.useState(a.getStats()),[i,c]=o.useState(a.getPoolState()),[r,u]=o.useState([]),[w,f]=o.useState(!1),[g,p]=o.useState({maxSize:5,minSize:2,concurrentRequests:3}),d=o.useCallback(()=>{s(a.getStats()),c(a.getPoolState())},[a]);o.useEffect(()=>{const n=setInterval(d,1e3);return()=>clearInterval(n)},[d]);const b=o.useCallback(async n=>{const x={id:n,type:"request",status:"borrowing",startTime:Date.now()};u(y=>[...y,x]);try{const y=await a.borrowConnection();if(u(h=>h.map(l=>l.id===n?{...l,status:"executing"}:l)),await new Promise(h=>setTimeout(h,1e3+Math.random()*2e3)),Math.random()<.1)throw new Error("Request failed");await a.returnConnection(y),u(h=>h.map(l=>l.id===n?{...l,status:"completed",endTime:Date.now()}:l))}catch(y){u(h=>h.map(l=>l.id===n?{...l,status:"error",endTime:Date.now(),error:y instanceof Error?y.message:"Unknown error"}:l))}},[a]),v=o.useCallback(async()=>{const n=`req_${Date.now()}_${Math.random().toString(36).substr(2,4)}`;await b(n),d()},[b,d]),j=o.useCallback(async()=>{f(!0);try{const n=Array.from({length:g.concurrentRequests},(x,y)=>{const h=`batch_${Date.now()}_${y}`;return b(h)});await Promise.all(n)}finally{f(!1),d()}},[g.concurrentRequests,b,d]),C=o.useCallback(async()=>{f(!0);try{await a.warmUp()}finally{f(!1),d()}},[a,d]),N=o.useCallback(async()=>{f(!0);try{await a.clear(),u([])}finally{f(!1),d()}},[a,d]),S=o.useCallback(()=>{u([])},[]);o.useEffect(()=>()=>{a.destroy()},[a]);const T=n=>{switch(n){case"completed":return"text-green-600";case"error":return"text-red-600";case"executing":return"text-blue-600";case"borrowing":return"text-yellow-600";default:return"text-gray-600"}},I=n=>{switch(n){case"completed":return"bg-green-100";case"error":return"bg-red-100";case"executing":return"bg-blue-100";case"borrowing":return"bg-yellow-100";default:return"bg-gray-100"}};return t.jsx("div",{className:"space-y-4",children:t.jsxs("div",{className:"bg-white p-6 rounded-lg border",children:[t.jsx("h3",{className:"text-lg font-semibold mb-4",children:"请求池管理演示"}),t.jsxs("div",{className:"grid grid-cols-1 lg:grid-cols-2 gap-6",children:[t.jsxs("div",{className:"space-y-4",children:[t.jsxs("div",{children:[t.jsx("h4",{className:"font-medium text-gray-900 mb-2",children:"池配置"}),t.jsxs("div",{className:"space-y-2",children:[t.jsxs("div",{children:[t.jsx("label",{className:"block text-sm text-gray-600 mb-1",children:"最大连接数"}),t.jsx("input",{type:"number",value:g.maxSize,onChange:n=>p(x=>({...x,maxSize:parseInt(n.target.value)||1})),min:"1",max:"20",className:"w-full p-2 border border-gray-300 rounded-md"})]}),t.jsxs("div",{children:[t.jsx("label",{className:"block text-sm text-gray-600 mb-1",children:"最小连接数"}),t.jsx("input",{type:"number",value:g.minSize,onChange:n=>p(x=>({...x,minSize:parseInt(n.target.value)||0})),min:"0",max:g.maxSize,className:"w-full p-2 border border-gray-300 rounded-md"})]}),t.jsxs("div",{children:[t.jsx("label",{className:"block text-sm text-gray-600 mb-1",children:"并发请求数"}),t.jsx("input",{type:"number",value:g.concurrentRequests,onChange:n=>p(x=>({...x,concurrentRequests:parseInt(n.target.value)||1})),min:"1",max:"10",className:"w-full p-2 border border-gray-300 rounded-md"})]})]})]}),t.jsxs("div",{children:[t.jsx("h4",{className:"font-medium text-gray-900 mb-2",children:"操作"}),t.jsxs("div",{className:"space-y-2",children:[t.jsxs("div",{className:"flex space-x-2",children:[t.jsx("button",{onClick:v,disabled:w,className:"flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-400",children:"单个请求"}),t.jsx("button",{onClick:j,disabled:w,className:"flex-1 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:bg-gray-400",children:"并发请求"})]}),t.jsxs("div",{className:"flex space-x-2",children:[t.jsx("button",{onClick:C,disabled:w,className:"flex-1 px-4 py-2 bg-yellow-600 text-white rounded-md hover:bg-yellow-700 disabled:bg-gray-400",children:"预热池"}),t.jsx("button",{onClick:N,disabled:w,className:"flex-1 px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 disabled:bg-gray-400",children:"清空池"})]}),t.jsx("button",{onClick:S,className:"w-full px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700",children:"清空操作记录"})]})]}),t.jsxs("div",{children:[t.jsx("h4",{className:"font-medium text-gray-900 mb-2",children:"池统计"}),t.jsxs("div",{className:"bg-gray-50 p-4 rounded-md space-y-2",children:[t.jsxs("div",{className:"flex justify-between",children:[t.jsx("span",{className:"text-sm text-gray-600",children:"总连接数:"}),t.jsx("span",{className:"text-sm font-medium",children:e.totalConnections})]}),t.jsxs("div",{className:"flex justify-between",children:[t.jsx("span",{className:"text-sm text-gray-600",children:"活跃连接:"}),t.jsx("span",{className:"text-sm font-medium text-blue-600",children:e.activeConnections})]}),t.jsxs("div",{className:"flex justify-between",children:[t.jsx("span",{className:"text-sm text-gray-600",children:"空闲连接:"}),t.jsx("span",{className:"text-sm font-medium text-green-600",children:e.idleConnections})]}),t.jsxs("div",{className:"flex justify-between",children:[t.jsx("span",{className:"text-sm text-gray-600",children:"总借用:"}),t.jsx("span",{className:"text-sm font-medium",children:e.totalBorrowed})]}),t.jsxs("div",{className:"flex justify-between",children:[t.jsx("span",{className:"text-sm text-gray-600",children:"总归还:"}),t.jsx("span",{className:"text-sm font-medium",children:e.totalReturned})]}),t.jsxs("div",{className:"flex justify-between",children:[t.jsx("span",{className:"text-sm text-gray-600",children:"平均借用时间:"}),t.jsxs("span",{className:"text-sm font-medium",children:[Math.round(e.avgBorrowTime),"ms"]})]}),t.jsxs("div",{className:"flex justify-between",children:[t.jsx("span",{className:"text-sm text-gray-600",children:"错误率:"}),t.jsxs("span",{className:"text-sm font-medium text-red-600",children:[(e.errorRate*100).toFixed(1),"%"]})]})]})]})]}),t.jsxs("div",{className:"space-y-4",children:[t.jsxs("div",{children:[t.jsxs("h4",{className:"font-medium text-gray-900 mb-2",children:["连接状态 (",i.total,")"]}),t.jsx("div",{className:"bg-gray-50 p-4 rounded-md max-h-40 overflow-y-auto",children:i.connections.length===0?t.jsx("div",{className:"text-sm text-gray-500 text-center py-2",children:"无连接"}):t.jsx("div",{className:"space-y-2",children:i.connections.map(n=>t.jsxs("div",{className:"bg-white p-2 rounded border",children:[t.jsxs("div",{className:"flex items-center justify-between mb-1",children:[t.jsx("span",{className:"text-xs font-mono text-gray-600",children:n.id.slice(-8)}),t.jsx("span",{className:`px-2 py-1 text-xs rounded ${n.borrowed?"bg-blue-100 text-blue-600":"bg-green-100 text-green-600"}`,children:n.borrowed?"使用中":"空闲"})]}),t.jsxs("div",{className:"text-xs text-gray-500 space-y-1",children:[t.jsxs("div",{children:["年龄: ",Math.round(n.age/1e3),"s"]}),t.jsxs("div",{children:["空闲: ",Math.round(n.idleTime/1e3),"s"]}),t.jsxs("div",{children:["使用次数: ",n.borrowCount]})]})]},n.id))})})]}),t.jsxs("div",{children:[t.jsxs("h4",{className:"font-medium text-gray-900 mb-2",children:["操作记录 (",r.length,")"]}),t.jsx("div",{className:"bg-gray-50 p-4 rounded-md max-h-60 overflow-y-auto",children:r.length===0?t.jsx("div",{className:"text-sm text-gray-500 text-center py-2",children:"暂无操作记录"}):t.jsxs("div",{className:"space-y-1",children:[r.slice(-20).reverse().map(n=>t.jsxs("div",{className:"flex items-center justify-between text-sm",children:[t.jsxs("div",{className:"flex items-center space-x-2 flex-1",children:[t.jsx("span",{className:`px-2 py-1 text-xs rounded ${I(n.status)} ${T(n.status)}`,children:n.status}),t.jsx("span",{className:"text-xs text-gray-600 font-mono",children:n.id.slice(-8)})]}),t.jsx("div",{className:"text-xs text-gray-500",children:n.endTime?`${n.endTime-n.startTime}ms`:"..."})]},n.id)),r.length>20&&t.jsxs("div",{className:"text-xs text-gray-500 text-center pt-2",children:["还有 ",r.length-20," 条记录..."]})]})})]})]})]})]})})},M=()=>t.jsx(z,{title:"请求池管理",description:"学习如何使用连接池技术优化HTTP请求性能，通过复用连接减少建立连接的开销，提高应用程序的并发处理能力。",overview:[{title:"核心概念",items:["连接池是一种资源管理技术，预先创建并维护一定数量的连接","通过复用连接避免频繁建立和销毁连接的开销","支持连接的借用、归还、验证和清理机制","提供连接池的监控和统计功能"]},{title:"主要优势",items:["减少连接建立和销毁的时间开销","控制并发连接数，避免资源耗尽","提高系统的响应速度和吞吐量","支持连接的健康检查和自动恢复"]},{title:"适用场景",items:["高并发的Web应用程序","需要频繁进行HTTP请求的系统","微服务架构中的服务间通信","数据库连接管理"]},{title:"注意事项",items:["合理设置池的大小参数","及时处理连接的异常和超时","定期清理无效和过期的连接","监控池的使用情况和性能指标"]}],examples:[{title:"请求池管理演示",component:t.jsx(k,{}),description:"演示连接池的创建、配置、使用和监控功能。",observationPoints:["观察连接池的初始化过程和最小连接数的维护","点击'单个请求'按钮，观察连接的借用和归还过程","点击'并发请求'按钮，观察多个请求如何共享连接池","观察连接状态的实时变化和统计信息的更新","点击'预热池'按钮，观察连接池的预热机制","点击'清空池'按钮，观察所有连接的销毁过程"],keyPoints:["连接池维护最小和最大连接数限制","支持连接的借用、归还和验证机制","提供详细的统计信息和监控数据","自动处理连接的生命周期管理","支持并发请求的连接复用"],commonTraps:["连接池大小设置不合理导致性能问题","忘记归还连接导致连接泄露","没有处理连接验证失败的情况","忽略连接池的监控和统计信息"],solutions:["根据应用负载合理设置池的大小参数","使用try-finally确保连接的正确归还","实现连接的健康检查和自动重连机制","定期监控池的使用情况和性能指标"],importantTips:["连接池的最大连接数应该根据系统资源和负载来设置","最小连接数可以减少连接建立的延迟","连接的空闲时间和验证策略需要根据实际情况调整","定期清理过期连接可以保持池的健康状态"]}],tutorial:{concepts:["连接池是一种资源管理模式，通过预先创建和维护连接来提高性能","连接工厂负责连接的创建、验证、重置和销毁","池化连接包含连接对象和相关的元数据信息","连接池支持借用、归还、清理和监控等操作","统计信息帮助监控池的使用情况和性能表现"],steps:["定义连接池的配置参数（最大/最小连接数、超时时间等）","实现连接工厂接口，提供连接的生命周期管理","创建连接池实例并初始化最小连接数","实现连接的借用逻辑，包括获取、创建和等待","实现连接的归还逻辑，包括验证、重置和队列处理","添加连接的清理机制，定期清理过期和无效连接","提供统计和监控功能，跟踪池的使用情况"],tips:["连接池的大小应该根据应用的并发需求来设置","使用连接验证确保连接的有效性","实现连接的超时和重试机制","定期监控连接池的性能指标","在应用关闭时正确清理连接池资源"]},interview:{questions:[{question:"什么是连接池？它解决了什么问题？",answer:"连接池是一种资源管理技术，预先创建并维护一定数量的连接。它解决了频繁建立和销毁连接带来的性能开销问题，通过复用连接提高系统的响应速度和吞吐量。"},{question:"连接池的核心参数有哪些？如何设置？",answer:"核心参数包括：最大连接数（控制资源使用上限）、最小连接数（保证基本可用性）、最大空闲时间（控制连接生命周期）、最大等待时间（避免无限等待）。设置时需要根据系统负载、资源限制和性能要求来平衡。"},{question:"如何处理连接池中的异常连接？",answer:"通过连接验证机制检测异常连接，包括借用时验证、归还时验证和空闲时测试。发现异常连接时立即销毁并创建新连接。同时实现连接的健康检查和自动恢复机制。"},{question:"连接池如何处理并发访问？",answer:"使用线程安全的数据结构管理连接，实现连接的原子性借用和归还操作。当没有可用连接时，将请求加入等待队列，连接归还时优先处理等待的请求。"}],keyPoints:["连接池通过复用连接减少建立连接的开销","合理的池大小设置对性能至关重要","连接验证和健康检查确保连接的可用性","统计和监控帮助优化池的配置和性能","正确的资源管理避免连接泄露和资源耗尽"]},bestPractices:{dos:["根据应用负载合理设置连接池大小","实现连接的验证和健康检查机制","使用try-finally确保连接的正确归还","定期监控连接池的使用情况和性能","在应用关闭时正确清理连接池资源","设置合理的连接超时和重试策略"],donts:["不要设置过大的连接池导致资源浪费","不要忘记归还连接导致连接泄露","不要忽略连接的验证和异常处理","不要在高并发场景下使用同步阻塞操作","不要忽略连接池的监控和统计信息"],patterns:["工厂模式：使用连接工厂管理连接的生命周期","对象池模式：实现连接的复用和管理","观察者模式：监控连接池状态变化","策略模式：支持不同的连接验证和清理策略","单例模式：确保连接池的全局唯一性"]}});export{M as default};
