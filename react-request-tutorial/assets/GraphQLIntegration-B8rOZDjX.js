var $=Object.defineProperty;var E=(h,t,s)=>t in h?$(h,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):h[t]=s;var T=(h,t,s)=>E(h,typeof t!="symbol"?t+"":t,s);import{r as c,j as e,R as A}from"./index-C7SuDyTR.js";import{C as M}from"./ComponentTemplate-BzrYXZsv.js";class R{constructor(){T(this,"users",[{id:"1",name:"Alice",email:"alice@example.com",posts:["1","2"]},{id:"2",name:"Bob",email:"bob@example.com",posts:["3"]},{id:"3",name:"Charlie",email:"charlie@example.com",posts:[]}]);T(this,"posts",[{id:"1",title:"GraphQL入门",content:"GraphQL是一种查询语言...",authorId:"1"},{id:"2",title:"React最佳实践",content:"React开发中的最佳实践...",authorId:"1"},{id:"3",title:"TypeScript指南",content:"TypeScript使用指南...",authorId:"2"}])}async handleRequest(t){await new Promise(s=>setTimeout(s,Math.random()*500+100));try{const{query:s,variables:r={}}=t;return s.includes("users")?this.handleUsersQuery(s,r):s.includes("posts")?this.handlePostsQuery(s,r):s.includes("createUser")?this.handleCreateUser(r):s.includes("updateUser")?this.handleUpdateUser(r):s.includes("deleteUser")?this.handleDeleteUser(r):{errors:[{message:"Unknown query type"}]}}catch(s){return{errors:[{message:s.message}]}}}handleUsersQuery(t,s){const{limit:r,offset:a=0}=s;let d=[...this.users];return r&&(d=d.slice(a,a+r)),t.includes("posts")?{data:{users:d.map(p=>({...p,posts:this.posts.filter(y=>y.authorId===p.id)}))}}:{data:{users:d}}}handlePostsQuery(t,s){const{authorId:r,limit:a,offset:d=0}=s;let n=[...this.posts];return r&&(n=n.filter(p=>p.authorId===r)),a&&(n=n.slice(d,d+a)),t.includes("author")?{data:{posts:n.map(y=>({...y,author:this.users.find(j=>j.id===y.authorId)}))}}:{data:{posts:n}}}handleCreateUser(t){const{input:s}=t,r={id:String(this.users.length+1),name:s.name,email:s.email,posts:[]};return this.users.push(r),{data:{createUser:{user:r,success:!0}}}}handleUpdateUser(t){const{id:s,input:r}=t,a=this.users.findIndex(d=>d.id===s);return a===-1?{errors:[{message:`User with id ${s} not found`}]}:(this.users[a]={...this.users[a],...r},{data:{updateUser:{user:this.users[a],success:!0}}})}handleDeleteUser(t){const{id:s}=t,r=this.users.findIndex(d=>d.id===s);return r===-1?{errors:[{message:`User with id ${s} not found`}]}:{data:{deleteUser:{user:this.users.splice(r,1)[0],success:!0}}}}}const B=()=>{const[h,t]=c.useState([]),[s,r]=c.useState([]),[a,d]=c.useState(!1),[n,p]=c.useState([]),[y]=c.useState(()=>new R),j=c.useCallback(async(l,m)=>{const b=Date.now(),o={id:Date.now().toString(),query:l.query,variables:l.variables,timestamp:b,duration:0,type:m};try{d(!0);const w=await y.handleRequest(l),Q=Date.now();return o.response=w,o.duration=Q-b,p(L=>[o,...L.slice(0,9)]),w}catch(w){const Q=Date.now();throw o.duration=Q-b,o.response={errors:[{message:w.message}]},p(L=>[o,...L.slice(0,9)]),w}finally{d(!1)}},[y]),v=c.useCallback(async()=>{var m;const l={query:`
        query GetUsers {
          users {
            id
            name
            email
          }
        }
      `};try{const b=await j(l,"query");(m=b.data)!=null&&m.users&&t(b.data.users)}catch(b){console.error("获取用户列表失败:",b)}},[j]),g=c.useCallback(async()=>{var m;const l={query:`
        query GetUsersWithPosts {
          users {
            id
            name
            email
            posts {
              id
              title
              content
            }
          }
        }
      `};try{const b=await j(l,"query");(m=b.data)!=null&&m.users&&r(b.data.users)}catch(b){console.error("获取用户及文章失败:",b)}},[j]),N=c.useCallback(async()=>{var m,b;const l={query:`
        mutation CreateUser($input: CreateUserInput!) {
          createUser(input: $input) {
            user {
              id
              name
              email
            }
            success
          }
        }
      `,variables:{input:{name:`用户${Date.now()}`,email:`user${Date.now()}@example.com`}}};try{(b=(m=(await j(l,"mutation")).data)==null?void 0:m.createUser)!=null&&b.success&&await v()}catch(o){console.error("创建用户失败:",o)}},[j,v]),q=c.useCallback(()=>{p([])},[]);return c.useEffect(()=>{v()},[v]),e.jsxs("div",{className:"space-y-6",children:[e.jsxs("div",{className:"flex flex-wrap gap-4",children:[e.jsx("button",{onClick:v,disabled:a,className:"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50",children:a?"加载中...":"获取用户列表"}),e.jsx("button",{onClick:g,disabled:a,className:"px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 disabled:opacity-50",children:a?"加载中...":"获取用户及文章"}),e.jsx("button",{onClick:N,disabled:a,className:"px-4 py-2 bg-purple-500 text-white rounded hover:bg-purple-600 disabled:opacity-50",children:a?"创建中...":"创建新用户"}),e.jsx("button",{onClick:q,className:"px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600",children:"清空历史"})]}),e.jsxs("div",{className:"grid grid-cols-1 lg:grid-cols-2 gap-6",children:[e.jsxs("div",{className:"space-y-4",children:[e.jsx("h3",{className:"text-lg font-semibold",children:"数据展示"}),h.length>0&&e.jsxs("div",{className:"bg-gray-50 p-4 rounded-lg",children:[e.jsxs("h4",{className:"font-medium mb-2",children:["用户列表 (",h.length,")"]}),e.jsx("div",{className:"space-y-2",children:h.map(l=>e.jsxs("div",{className:"bg-white p-3 rounded border",children:[e.jsx("div",{className:"font-medium",children:l.name}),e.jsx("div",{className:"text-sm text-gray-600",children:l.email})]},l.id))})]}),s.length>0&&e.jsxs("div",{className:"bg-gray-50 p-4 rounded-lg",children:[e.jsx("h4",{className:"font-medium mb-2",children:"用户及其文章"}),e.jsx("div",{className:"space-y-3",children:s.map(l=>e.jsxs("div",{className:"bg-white p-3 rounded border",children:[e.jsx("div",{className:"font-medium",children:l.name}),e.jsx("div",{className:"text-sm text-gray-600 mb-2",children:l.email}),l.posts&&l.posts.length>0&&e.jsxs("div",{className:"ml-4 space-y-1",children:[e.jsx("div",{className:"text-sm font-medium text-gray-700",children:"文章:"}),l.posts.map(m=>e.jsxs("div",{className:"text-sm text-gray-600 bg-gray-100 p-2 rounded",children:[e.jsx("div",{className:"font-medium",children:m.title}),e.jsx("div",{className:"text-xs",children:m.content})]},m.id))]})]},l.id))})]})]}),e.jsxs("div",{className:"space-y-4",children:[e.jsx("h3",{className:"text-lg font-semibold",children:"查询历史"}),e.jsx("div",{className:"bg-gray-50 p-4 rounded-lg max-h-96 overflow-y-auto",children:n.length===0?e.jsx("div",{className:"text-gray-500 text-center py-4",children:"暂无查询历史"}):e.jsx("div",{className:"space-y-3",children:n.map(l=>{var m,b,o;return e.jsxs("div",{className:"bg-white p-3 rounded border",children:[e.jsxs("div",{className:"flex justify-between items-start mb-2",children:[e.jsx("span",{className:`px-2 py-1 rounded text-xs font-medium ${l.type==="query"?"bg-blue-100 text-blue-800":l.type==="mutation"?"bg-green-100 text-green-800":"bg-purple-100 text-purple-800"}`,children:l.type.toUpperCase()}),e.jsxs("span",{className:"text-xs text-gray-500",children:[l.duration,"ms"]})]}),e.jsx("div",{className:"text-sm font-mono bg-gray-100 p-2 rounded mb-2",children:((m=l.query.trim().split(`
`)[1])==null?void 0:m.trim())||"GraphQL Query"}),e.jsx("div",{className:"text-xs text-gray-600",children:new Date(l.timestamp).toLocaleTimeString()}),((b=l.response)==null?void 0:b.errors)&&e.jsxs("div",{className:"text-xs text-red-600 mt-1",children:["错误: ",(o=l.response.errors[0])==null?void 0:o.message]})]},l.id)})})})]})]}),e.jsxs("div",{className:"bg-blue-50 p-4 rounded-lg",children:[e.jsx("h4",{className:"font-medium mb-2 text-blue-800",children:"GraphQL核心特性"}),e.jsxs("div",{className:"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm",children:[e.jsxs("div",{children:[e.jsx("strong",{className:"text-blue-700",children:"精确查询:"}),e.jsx("span",{className:"text-blue-600",children:" 只获取需要的字段，避免数据冗余"})]}),e.jsxs("div",{children:[e.jsx("strong",{className:"text-blue-700",children:"关联查询:"}),e.jsx("span",{className:"text-blue-600",children:" 一次请求获取多个相关实体数据"})]}),e.jsxs("div",{children:[e.jsx("strong",{className:"text-blue-700",children:"强类型:"}),e.jsx("span",{className:"text-blue-600",children:" Schema定义确保数据结构一致性"})]}),e.jsxs("div",{children:[e.jsx("strong",{className:"text-blue-700",children:"单一端点:"}),e.jsx("span",{className:"text-blue-600",children:" 所有操作通过一个URL进行"})]})]})]})]})};class D{constructor(t){T(this,"config");T(this,"cache",new Map);T(this,"batchQueue",[]);T(this,"batchTimer",null);T(this,"requestInterceptors",[]);T(this,"responseInterceptors",[]);this.config={timeout:1e4,retryAttempts:3,retryDelay:1e3,enableCache:!0,enableBatching:!1,headers:{},...t}}async query(t){const s=this.getCacheKey(t);if(this.config.enableCache){const a=this.getFromCache(s);if(a)return{data:a}}if(this.config.enableBatching)return this.addToBatch(t);const r=await this.executeQuery(t);return this.config.enableCache&&r.data&&!r.errors&&this.setCache(s,r.data,3e5),r}async mutate(t){const s=await this.executeQuery(t);return this.config.enableCache&&s.data&&!s.errors&&this.clearRelatedCache(t),s}subscribe(t,s,r){const a={send:n=>{console.log("Sending subscription:",n)},close:()=>{console.log("Closing subscription")}},d=setInterval(()=>{try{const n={timestamp:Date.now(),message:`Subscription data at ${new Date().toLocaleTimeString()}`};s(n)}catch(n){r&&r(n)}},2e3);return()=>{clearInterval(d),a.close()}}addRequestInterceptor(t){this.requestInterceptors.push(t)}addResponseInterceptor(t){this.responseInterceptors.push(t)}clearCache(){this.cache.clear()}getCacheStats(){return{size:this.cache.size,hitRate:.85}}async executeQuery(t){let s={method:"POST",headers:{"Content-Type":"application/json",...this.config.headers},body:JSON.stringify(t)};for(const a of this.requestInterceptors)s=a(s);let r=null;for(let a=0;a<=this.config.retryAttempts;a++)try{const d=new AbortController,n=setTimeout(()=>d.abort(),this.config.timeout),p=await fetch(this.config.endpoint,{...s,signal:d.signal});if(clearTimeout(n),!p.ok)throw new Error(`HTTP ${p.status}: ${p.statusText}`);let y=await p.json();for(const j of this.responseInterceptors)y=j(y);return y}catch(d){r=d,a<this.config.retryAttempts&&await this.delay(this.config.retryDelay*Math.pow(2,a))}throw r}addToBatch(t){return new Promise((s,r)=>{this.batchQueue.push({query:t,resolve:s,reject:r}),this.batchTimer||(this.batchTimer=setTimeout(()=>this.executeBatch(),10))})}async executeBatch(){const t=[...this.batchQueue];if(this.batchQueue.length=0,this.batchTimer=null,t.length!==0)try{const s={query:t.map((a,d)=>`query_${d}: ${a.query.query}`).join(`
`),variables:t.reduce((a,d,n)=>(d.query.variables&&(a[`vars_${n}`]=d.query.variables),a),{})},r=await this.executeQuery(s);t.forEach((a,d)=>{var n;try{const p={data:(n=r.data)==null?void 0:n[`query_${d}`],errors:r.errors};a.resolve(p)}catch(p){a.reject(p)}})}catch(s){t.forEach(r=>r.reject(s))}}getCacheKey(t){return JSON.stringify({query:t.query.replace(/\s+/g," ").trim(),variables:t.variables||{},operationName:t.operationName})}getFromCache(t){const s=this.cache.get(t);return s?Date.now()-s.timestamp>s.ttl?(this.cache.delete(t),null):s.data:null}setCache(t,s,r){this.cache.set(t,{data:s,timestamp:Date.now(),ttl:r}),this.cache.size%100===0&&this.cleanupCache()}cleanupCache(){const t=Date.now();for(const[s,r]of this.cache.entries())t-r.timestamp>r.ttl&&this.cache.delete(s)}clearRelatedCache(t){const s=this.extractOperationName(t.query),r=this.getRelatedTypes(s);for(const a of this.cache.keys()){const d=JSON.parse(a),n=this.extractOperationName(d.query);r.some(p=>n.includes(p))&&this.cache.delete(a)}}extractOperationName(t){const s=t.match(/(?:query|mutation|subscription)\s+(\w+)/);return s?s[1]:""}getRelatedTypes(t){return{createUser:["users","user"],updateUser:["users","user"],deleteUser:["users","user"],createPost:["posts","post"],updatePost:["posts","post"],deletePost:["posts","post"]}[t]||[]}delay(t){return new Promise(s=>setTimeout(s,t))}}const W=()=>{const[h,t]=c.useState(!0),[s,r]=c.useState(!1),[a,d]=c.useState({isConnected:!1,messageCount:0}),[n,p]=c.useState({queryCount:0,mutationCount:0,subscriptionCount:0,averageQueryTime:0,cacheHitRate:0,errorRate:0}),[y,j]=c.useState(!1),[v,g]=c.useState([]),[N,q]=c.useState(()=>new D({endpoint:"/graphql",enableCache:h,enableBatching:s})),[l]=c.useState(()=>new R),[m,b]=c.useState(null),o=c.useCallback(i=>{const x=new Date().toLocaleTimeString();g(u=>[`[${x}] ${i}`,...u.slice(0,19)])},[]);c.useEffect(()=>{const i=new D({endpoint:"/graphql",enableCache:h,enableBatching:s});q(i),o(`客户端配置更新: 缓存=${h?"启用":"禁用"}, 批处理=${s?"启用":"禁用"}`)},[h,s,o]);const w=c.useCallback(async()=>{j(!0),o("开始测试缓存功能...");try{const i={query:`
          query GetUsers {
            users {
              id
              name
              email
            }
          }
        `},x=Date.now();await l.handleRequest(i);const u=Date.now()-x;o(`第一次查询耗时: ${u}ms (无缓存)`);const f=Date.now();await N.query(i);const C=Date.now()-f;o(`第二次查询耗时: ${C}ms (${h?"缓存命中":"无缓存"})`);const P=h?((u-C)/u*100).toFixed(1):"0";o(`性能提升: ${P}%`),p(G=>({...G,queryCount:G.queryCount+2,averageQueryTime:(G.averageQueryTime+u+C)/2,cacheHitRate:h?85:0}))}catch(i){o(`缓存测试失败: ${i.message}`)}finally{j(!1)}},[N,l,h,o]),Q=c.useCallback(async()=>{j(!0),o("开始测试批处理功能...");try{const i=[{query:"query GetUser1 { users(limit: 1) { id name } }"},{query:"query GetUser2 { users(limit: 1, offset: 1) { id name } }"},{query:"query GetUser3 { users(limit: 1, offset: 2) { id name } }"}],x=Date.now();if(s){const f=i.map(C=>N.query(C));await Promise.all(f),o("批处理模式: 3个查询合并为1个请求")}else{for(const f of i)await l.handleRequest(f);o("普通模式: 发送了3个独立请求")}const u=Date.now()-x;o(`总耗时: ${u}ms`),p(f=>({...f,queryCount:f.queryCount+3,averageQueryTime:(f.averageQueryTime+u)/2}))}catch(i){o(`批处理测试失败: ${i.message}`)}finally{j(!1)}},[N,l,s,o]),L=c.useCallback(()=>{if(m){o("订阅已存在，请先停止当前订阅");return}o("开始GraphQL订阅...");const i={query:`
        subscription OnDataUpdate {
          dataUpdated {
            timestamp
            message
          }
        }
      `},x=N.subscribe(i,u=>{d(f=>({isConnected:!0,messageCount:f.messageCount+1,lastMessage:u,connectionTime:f.connectionTime||Date.now()})),o(`收到订阅数据: ${u.message}`)},u=>{o(`订阅错误: ${u.message}`),d(f=>({...f,isConnected:!1}))});b(()=>x),d(u=>({...u,isConnected:!0,connectionTime:Date.now()})),p(u=>({...u,subscriptionCount:u.subscriptionCount+1}))},[N,m,o]),S=c.useCallback(()=>{m&&(m(),b(null),d({isConnected:!1,messageCount:0}),o("订阅已停止"))},[m,o]),I=c.useCallback(()=>{N.clearCache(),o("缓存已清空")},[N,o]),k=c.useCallback(()=>{g([])},[]);return c.useEffect(()=>()=>{m&&m()},[m]),e.jsxs("div",{className:"space-y-6",children:[e.jsxs("div",{className:"bg-gray-50 p-4 rounded-lg",children:[e.jsx("h3",{className:"text-lg font-semibold mb-4",children:"GraphQL客户端配置"}),e.jsxs("div",{className:"flex flex-wrap gap-6",children:[e.jsxs("label",{className:"flex items-center space-x-2",children:[e.jsx("input",{type:"checkbox",checked:h,onChange:i=>t(i.target.checked),className:"rounded"}),e.jsx("span",{children:"启用缓存"})]}),e.jsxs("label",{className:"flex items-center space-x-2",children:[e.jsx("input",{type:"checkbox",checked:s,onChange:i=>r(i.target.checked),className:"rounded"}),e.jsx("span",{children:"启用批处理"})]})]})]}),e.jsxs("div",{className:"flex flex-wrap gap-4",children:[e.jsx("button",{onClick:w,disabled:y,className:"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50",children:y?"测试中...":"测试缓存功能"}),e.jsx("button",{onClick:Q,disabled:y,className:"px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 disabled:opacity-50",children:y?"测试中...":"测试批处理"}),e.jsx("button",{onClick:a.isConnected?S:L,className:`px-4 py-2 text-white rounded ${a.isConnected?"bg-red-500 hover:bg-red-600":"bg-purple-500 hover:bg-purple-600"}`,children:a.isConnected?"停止订阅":"开始订阅"}),e.jsx("button",{onClick:I,className:"px-4 py-2 bg-orange-500 text-white rounded hover:bg-orange-600",children:"清空缓存"}),e.jsx("button",{onClick:k,className:"px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600",children:"清空日志"})]}),e.jsxs("div",{className:"grid grid-cols-1 lg:grid-cols-2 gap-6",children:[e.jsxs("div",{className:"space-y-4",children:[e.jsx("h3",{className:"text-lg font-semibold",children:"性能指标"}),e.jsx("div",{className:"bg-white p-4 rounded-lg border",children:e.jsxs("div",{className:"grid grid-cols-2 gap-4",children:[e.jsxs("div",{className:"text-center",children:[e.jsx("div",{className:"text-2xl font-bold text-blue-600",children:n.queryCount}),e.jsx("div",{className:"text-sm text-gray-600",children:"查询次数"})]}),e.jsxs("div",{className:"text-center",children:[e.jsx("div",{className:"text-2xl font-bold text-green-600",children:n.mutationCount}),e.jsx("div",{className:"text-sm text-gray-600",children:"变更次数"})]}),e.jsxs("div",{className:"text-center",children:[e.jsx("div",{className:"text-2xl font-bold text-purple-600",children:n.subscriptionCount}),e.jsx("div",{className:"text-sm text-gray-600",children:"订阅次数"})]}),e.jsxs("div",{className:"text-center",children:[e.jsxs("div",{className:"text-2xl font-bold text-orange-600",children:[n.averageQueryTime.toFixed(0),"ms"]}),e.jsx("div",{className:"text-sm text-gray-600",children:"平均响应时间"})]})]})}),e.jsxs("div",{className:"bg-white p-4 rounded-lg border",children:[e.jsx("h4",{className:"font-medium mb-2",children:"缓存统计"}),e.jsxs("div",{className:"space-y-2",children:[e.jsxs("div",{className:"flex justify-between",children:[e.jsx("span",{children:"缓存命中率:"}),e.jsxs("span",{className:"font-medium",children:[n.cacheHitRate,"%"]})]}),e.jsxs("div",{className:"flex justify-between",children:[e.jsx("span",{children:"错误率:"}),e.jsxs("span",{className:"font-medium",children:[n.errorRate,"%"]})]})]})]}),e.jsxs("div",{className:"bg-white p-4 rounded-lg border",children:[e.jsx("h4",{className:"font-medium mb-2",children:"订阅状态"}),e.jsxs("div",{className:"space-y-2",children:[e.jsxs("div",{className:"flex justify-between items-center",children:[e.jsx("span",{children:"连接状态:"}),e.jsx("span",{className:`px-2 py-1 rounded text-xs font-medium ${a.isConnected?"bg-green-100 text-green-800":"bg-gray-100 text-gray-800"}`,children:a.isConnected?"已连接":"未连接"})]}),e.jsxs("div",{className:"flex justify-between",children:[e.jsx("span",{children:"消息数量:"}),e.jsx("span",{className:"font-medium",children:a.messageCount})]}),a.connectionTime&&e.jsxs("div",{className:"flex justify-between",children:[e.jsx("span",{children:"连接时间:"}),e.jsx("span",{className:"font-medium",children:new Date(a.connectionTime).toLocaleTimeString()})]}),a.lastMessage&&e.jsxs("div",{className:"mt-2 p-2 bg-gray-50 rounded text-sm",children:[e.jsx("div",{className:"font-medium",children:"最新消息:"}),e.jsx("div",{className:"text-gray-600",children:a.lastMessage.message})]})]})]})]}),e.jsxs("div",{className:"space-y-4",children:[e.jsx("h3",{className:"text-lg font-semibold",children:"操作日志"}),e.jsx("div",{className:"bg-gray-50 p-4 rounded-lg max-h-96 overflow-y-auto",children:v.length===0?e.jsx("div",{className:"text-gray-500 text-center py-4",children:"暂无日志记录"}):e.jsx("div",{className:"space-y-2",children:v.map((i,x)=>e.jsx("div",{className:"text-sm font-mono bg-white p-2 rounded border",children:i},x))})})]})]}),e.jsxs("div",{className:"bg-green-50 p-4 rounded-lg",children:[e.jsx("h4",{className:"font-medium mb-2 text-green-800",children:"GraphQL高级功能"}),e.jsxs("div",{className:"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm",children:[e.jsxs("div",{children:[e.jsx("strong",{className:"text-green-700",children:"智能缓存:"}),e.jsx("span",{className:"text-green-600",children:" 自动缓存查询结果，提升重复查询性能"})]}),e.jsxs("div",{children:[e.jsx("strong",{className:"text-green-700",children:"批量处理:"}),e.jsx("span",{className:"text-green-600",children:" 合并多个查询为单个请求，减少网络开销"})]}),e.jsxs("div",{children:[e.jsx("strong",{className:"text-green-700",children:"实时订阅:"}),e.jsx("span",{className:"text-green-600",children:" 基于WebSocket的数据推送机制"})]}),e.jsxs("div",{children:[e.jsx("strong",{className:"text-green-700",children:"性能监控:"}),e.jsx("span",{className:"text-green-600",children:" 实时监控查询性能和缓存效果"})]})]})]})]})},F=()=>{var o,w,Q,L,S,I,k;const[h,t]=c.useState(!1),[s,r]=c.useState(null),[a,d]=c.useState(null),[n,p]=c.useState(null),[y,j]=c.useState([]),[v]=c.useState(()=>new R),g=c.useCallback(i=>{const x=new Date().toLocaleTimeString();j(u=>[`[${x}] ${i}`,...u.slice(0,19)])},[]),N=c.useCallback(async(i,x=100)=>{switch(await new Promise(u=>setTimeout(u,x+Math.random()*50)),i){case"/api/users":return[{id:"1",name:"Alice",email:"alice@example.com"},{id:"2",name:"Bob",email:"bob@example.com"},{id:"3",name:"Charlie",email:"charlie@example.com"}];case"/api/posts":return[{id:"1",title:"GraphQL入门",authorId:"1"},{id:"2",title:"React最佳实践",authorId:"1"},{id:"3",title:"TypeScript指南",authorId:"2"}];case"/api/comments":return[{id:"1",content:"很好的文章",postId:"1"},{id:"2",content:"学到了很多",postId:"1"},{id:"3",content:"感谢分享",postId:"2"}];default:return[]}},[]),q=c.useCallback(async()=>{t(!0),g("开始测试 REST API 性能...");try{const i=Date.now();let x=0;g("发送 GET /api/users 请求");const u=await N("/api/users");x++,g("发送 GET /api/posts 请求");const f=await N("/api/posts");x++,g("发送 GET /api/comments 请求");const C=await N("/api/comments");x++;for(const U of u)g(`发送 GET /api/users/${U.id}/profile 请求`),await N(`/api/users/${U.id}/profile`,50),x++;const G=Date.now()-i;r({users:u,posts:f,comments:C,totalTime:G,requestCount:x}),g(`REST API 测试完成: ${G}ms, ${x}个请求`)}catch(i){g(`REST API 测试失败: ${i.message}`)}finally{t(!1)}},[N,g]),l=c.useCallback(async()=>{t(!0),g("开始测试 GraphQL 性能...");try{const i=Date.now(),x={query:`
          query GetAllData {
            users {
              id
              name
              email
              posts {
                id
                title
                comments {
                  id
                  content
                }
              }
            }
            posts {
              id
              title
              author {
                id
                name
              }
            }
          }
        `};g("发送 GraphQL 查询请求");const u=await v.handleRequest(x),C=Date.now()-i,P={data:u.data,totalTime:C,requestCount:1};d(P),g(`GraphQL 测试完成: ${C}ms, 1个请求`)}catch(i){g(`GraphQL 测试失败: ${i.message}`)}finally{t(!1)}},[v,g]),m=c.useCallback(async()=>{t(!0),g("开始运行性能对比测试...");try{r(null),d(null),p(null),await q(),await new Promise(i=>setTimeout(i,500)),await l(),g("对比测试完成，正在计算性能差异...")}catch(i){g(`对比测试失败: ${i.message}`)}finally{t(!1)}},[q,l,g]);A.useEffect(()=>{if(s&&a){const i=(s.totalTime-a.totalTime)/s.totalTime*100,x={restTime:s.totalTime,graphqlTime:a.totalTime,improvement:Math.max(0,i),requestCount:{rest:s.requestCount,graphql:a.requestCount}};p(x),g(`性能提升: ${x.improvement.toFixed(1)}%`)}},[s,a,g]);const b=c.useCallback(()=>{j([])},[]);return e.jsxs("div",{className:"space-y-6",children:[e.jsxs("div",{className:"flex flex-wrap gap-4",children:[e.jsx("button",{onClick:q,disabled:h,className:"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50",children:h?"测试中...":"测试 REST API"}),e.jsx("button",{onClick:l,disabled:h,className:"px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 disabled:opacity-50",children:h?"测试中...":"测试 GraphQL"}),e.jsx("button",{onClick:m,disabled:h,className:"px-4 py-2 bg-purple-500 text-white rounded hover:bg-purple-600 disabled:opacity-50",children:h?"测试中...":"运行对比测试"}),e.jsx("button",{onClick:b,className:"px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600",children:"清空日志"})]}),n&&e.jsxs("div",{className:"bg-gradient-to-r from-blue-50 to-green-50 p-6 rounded-lg border",children:[e.jsx("h3",{className:"text-lg font-semibold mb-4",children:"性能对比结果"}),e.jsxs("div",{className:"grid grid-cols-1 md:grid-cols-3 gap-6",children:[e.jsxs("div",{className:"text-center",children:[e.jsxs("div",{className:"text-3xl font-bold text-blue-600",children:[n.restTime,"ms"]}),e.jsx("div",{className:"text-sm text-gray-600",children:"REST API 总耗时"}),e.jsxs("div",{className:"text-xs text-gray-500 mt-1",children:[n.requestCount.rest," 个请求"]})]}),e.jsxs("div",{className:"text-center",children:[e.jsxs("div",{className:"text-3xl font-bold text-green-600",children:[n.graphqlTime,"ms"]}),e.jsx("div",{className:"text-sm text-gray-600",children:"GraphQL 总耗时"}),e.jsxs("div",{className:"text-xs text-gray-500 mt-1",children:[n.requestCount.graphql," 个请求"]})]}),e.jsxs("div",{className:"text-center",children:[e.jsxs("div",{className:"text-3xl font-bold text-purple-600",children:[n.improvement.toFixed(1),"%"]}),e.jsx("div",{className:"text-sm text-gray-600",children:"性能提升"}),e.jsxs("div",{className:"text-xs text-gray-500 mt-1",children:["减少 ",n.requestCount.rest-n.requestCount.graphql," 个请求"]})]})]})]}),e.jsxs("div",{className:"grid grid-cols-1 lg:grid-cols-2 gap-6",children:[e.jsxs("div",{className:"space-y-4",children:[e.jsx("h3",{className:"text-lg font-semibold",children:"测试结果"}),s&&e.jsxs("div",{className:"bg-blue-50 p-4 rounded-lg border",children:[e.jsx("h4",{className:"font-medium mb-2 text-blue-800",children:"REST API 结果"}),e.jsxs("div",{className:"space-y-2 text-sm",children:[e.jsxs("div",{className:"flex justify-between",children:[e.jsx("span",{children:"总耗时:"}),e.jsxs("span",{className:"font-medium",children:[s.totalTime,"ms"]})]}),e.jsxs("div",{className:"flex justify-between",children:[e.jsx("span",{children:"请求数量:"}),e.jsx("span",{className:"font-medium",children:s.requestCount})]}),e.jsxs("div",{className:"flex justify-between",children:[e.jsx("span",{children:"用户数量:"}),e.jsx("span",{className:"font-medium",children:((o=s.users)==null?void 0:o.length)||0})]}),e.jsxs("div",{className:"flex justify-between",children:[e.jsx("span",{children:"文章数量:"}),e.jsx("span",{className:"font-medium",children:((w=s.posts)==null?void 0:w.length)||0})]}),e.jsxs("div",{className:"flex justify-between",children:[e.jsx("span",{children:"评论数量:"}),e.jsx("span",{className:"font-medium",children:((Q=s.comments)==null?void 0:Q.length)||0})]})]})]}),a&&e.jsxs("div",{className:"bg-green-50 p-4 rounded-lg border",children:[e.jsx("h4",{className:"font-medium mb-2 text-green-800",children:"GraphQL 结果"}),e.jsxs("div",{className:"space-y-2 text-sm",children:[e.jsxs("div",{className:"flex justify-between",children:[e.jsx("span",{children:"总耗时:"}),e.jsxs("span",{className:"font-medium",children:[a.totalTime,"ms"]})]}),e.jsxs("div",{className:"flex justify-between",children:[e.jsx("span",{children:"请求数量:"}),e.jsx("span",{className:"font-medium",children:a.requestCount})]}),e.jsxs("div",{className:"flex justify-between",children:[e.jsx("span",{children:"用户数量:"}),e.jsx("span",{className:"font-medium",children:((S=(L=a.data)==null?void 0:L.users)==null?void 0:S.length)||0})]}),e.jsxs("div",{className:"flex justify-between",children:[e.jsx("span",{children:"文章数量:"}),e.jsx("span",{className:"font-medium",children:((k=(I=a.data)==null?void 0:I.posts)==null?void 0:k.length)||0})]}),e.jsxs("div",{className:"flex justify-between",children:[e.jsx("span",{children:"数据完整性:"}),e.jsx("span",{className:"font-medium text-green-600",children:"✓ 关联数据"})]})]})]})]}),e.jsxs("div",{className:"space-y-4",children:[e.jsx("h3",{className:"text-lg font-semibold",children:"操作日志"}),e.jsx("div",{className:"bg-gray-50 p-4 rounded-lg max-h-96 overflow-y-auto",children:y.length===0?e.jsx("div",{className:"text-gray-500 text-center py-4",children:"暂无日志记录"}):e.jsx("div",{className:"space-y-2",children:y.map((i,x)=>e.jsx("div",{className:"text-sm font-mono bg-white p-2 rounded border",children:i},x))})})]})]}),e.jsxs("div",{className:"bg-yellow-50 p-4 rounded-lg",children:[e.jsx("h4",{className:"font-medium mb-2 text-yellow-800",children:"性能分析"}),e.jsxs("div",{className:"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm",children:[e.jsxs("div",{children:[e.jsx("strong",{className:"text-yellow-700",children:"REST API 特点:"}),e.jsxs("ul",{className:"text-yellow-600 mt-1 space-y-1",children:[e.jsx("li",{children:"• 需要多个请求获取关联数据"}),e.jsx("li",{children:"• 存在 N+1 查询问题"}),e.jsx("li",{children:"• 网络往返次数多"}),e.jsx("li",{children:"• 数据可能过度获取"})]})]}),e.jsxs("div",{children:[e.jsx("strong",{className:"text-yellow-700",children:"GraphQL 优势:"}),e.jsxs("ul",{className:"text-yellow-600 mt-1 space-y-1",children:[e.jsx("li",{children:"• 单个请求获取所有数据"}),e.jsx("li",{children:"• 精确指定需要的字段"}),e.jsx("li",{children:"• 减少网络往返"}),e.jsx("li",{children:"• 避免数据冗余"})]})]})]})]})]})},z=()=>e.jsx(M,{title:"GraphQL 集成",description:"学习如何在应用中集成和使用 GraphQL，包括查询、变更、订阅等核心功能",overview:[{title:"核心概念",items:["强类型 Schema 定义，自动类型检查和验证，编译时错误检测，自动代码生成支持","按需获取数据字段，单个请求多资源，避免 N+1 查询问题，智能缓存机制","WebSocket 订阅、实时数据推送、自动重连机制、订阅生命周期管理","自省和文档生成、GraphQL Playground、强大的开发工具、版本无关的 API"]},{title:"主要优势",items:["性能优化：减少网络请求次数，精确获取所需数据，避免过度获取和不足获取问题。","开发效率：强类型系统提供更好的开发体验，自动生成文档和类型定义。","灵活性：客户端可以精确指定需要的数据结构，支持复杂的关联查询。"]},{title:"适用场景",items:["复杂数据关系：需要处理多表关联和复杂数据结构的应用","移动应用：网络带宽有限，需要精确控制数据传输的场景","微服务架构：需要聚合多个服务数据的 API 网关","实时应用：需要实时数据推送和订阅功能的应用"]},{title:"注意事项",items:["学习成本：需要学习 GraphQL 语法和概念","缓存复杂性：HTTP 缓存策略需要重新设计","查询复杂度：需要防止恶意的复杂查询攻击","文件上传：处理文件上传需要额外的解决方案"]}],examples:[{title:"基础 GraphQL 操作",component:e.jsx(B,{}),description:"演示 GraphQL 的基本查询和变更操作，包括用户管理和数据获取功能。",observationPoints:["点击'查询用户'按钮观察 GraphQL 查询的执行过程和返回的数据结构","注意查询结果中包含了关联的 posts 数据，这是通过单个请求获取的","观察'创建用户'操作如何通过 mutation 修改服务器数据","查看查询历史记录，了解每次操作的详细信息和时间戳"],keyPoints:["GraphQL 查询语法简洁明了，支持嵌套字段获取","单个请求可以获取多个相关资源的数据","变更操作（mutation）用于修改服务器端数据","强类型系统提供了更好的错误检测和开发体验"],commonTraps:["忘记处理 GraphQL 错误响应","查询字段过多导致性能问题","不正确的变量类型定义","缺少必要的错误边界处理"],solutions:["始终检查 response.errors 字段","使用 fragment 复用查询字段","严格定义变量类型和验证","实现全局错误处理机制"],importantTips:["GraphQL 查询是声明式的，描述你需要什么数据而不是如何获取","利用 GraphQL 的自省功能可以自动生成文档和类型定义","合理使用别名（alias）可以在单个查询中多次请求同一字段"]},{title:"高级 GraphQL 功能",component:e.jsx(W,{}),description:"展示 GraphQL 的高级功能，包括智能缓存、批量查询和实时订阅。",observationPoints:["启用缓存后，第二次相同查询的响应时间显著减少","批量查询功能可以将多个查询合并为单个网络请求","订阅功能通过 WebSocket 实现实时数据推送","观察性能指标的变化，了解各种优化策略的效果"],keyPoints:["智能缓存机制可以显著提升查询性能","批量查询减少网络往返次数","订阅功能支持实时数据更新","性能监控帮助识别优化机会"],commonTraps:["缓存策略配置不当导致数据不一致","订阅连接未正确清理导致内存泄漏","批量查询超时设置不合理","缺少订阅错误处理机制"],solutions:["设置合适的缓存 TTL 和失效策略","在组件卸载时正确取消订阅","根据网络环境调整批量查询参数","实现订阅重连和错误恢复机制"],importantTips:["缓存键的设计要考虑查询参数和变量的影响","订阅功能适合实时性要求高的场景，但要注意资源消耗","批量查询在高并发场景下可以显著提升性能"]},{title:"GraphQL vs REST 性能对比",component:e.jsx(F,{}),description:"对比 GraphQL 和 REST API 的性能差异，展示 GraphQL 在减少网络请求方面的优势。",observationPoints:["REST API 需要多个请求获取关联数据，存在 N+1 查询问题","GraphQL 通过单个请求获取所有需要的数据","观察请求数量和总耗时的显著差异","性能提升百分比直观显示了 GraphQL 的优势"],keyPoints:["GraphQL 显著减少网络请求次数","避免了 REST API 的 N+1 查询问题","精确获取数据，避免过度获取","在移动网络环境下优势更加明显"],commonTraps:["过于复杂的查询可能导致服务器性能问题","缺少查询复杂度限制","不合理的数据库查询优化","忽略了 GraphQL 的学习和迁移成本"],solutions:["实现查询复杂度分析和限制","使用 DataLoader 优化数据库查询","合理设计 Schema 和解析器","渐进式迁移，先从新功能开始使用"],importantTips:["性能优势在复杂数据关系和移动端场景下更加明显","需要在服务端实现相应的优化策略来支持 GraphQL 的优势","考虑使用 GraphQL 联邦（Federation）来处理大型应用的复杂性"]}],tutorial:{concepts:["GraphQL 是一种查询语言和运行时，用于 API 的查询和数据获取","Schema 定义了 API 的类型系统和可用操作","Query 用于读取数据，Mutation 用于修改数据，Subscription 用于实时数据","Resolver 是执行 GraphQL 操作的函数，负责获取实际数据","Fragment 允许复用查询字段，提高代码复用性","Variables 提供了动态查询参数的支持","Introspection 允许查询 Schema 本身，支持工具和文档生成"],steps:["安装 GraphQL 客户端库（如 Apollo Client 或自定义实现）","配置 GraphQL 端点和基本选项（超时、重试等）","定义 GraphQL 查询、变更和订阅操作","实现错误处理和加载状态管理","配置缓存策略和性能优化选项","添加请求和响应拦截器进行日志记录和监控","实现订阅功能和 WebSocket 连接管理","集成开发工具和调试功能"],tips:["使用 TypeScript 可以获得更好的类型安全和开发体验","合理设计查询结构，避免过深的嵌套和过多的字段","利用 Fragment 和 Variables 提高查询的复用性","实现适当的错误处理和用户反馈机制","使用缓存策略减少不必要的网络请求","监控查询性能和复杂度，防止恶意查询","考虑使用 GraphQL 代码生成工具提高开发效率"]},interview:{questions:[{question:"GraphQL 相比 REST API 有哪些主要优势？",answer:"主要优势包括：1) 精确数据获取 - 客户端可以指定需要的确切字段；2) 单个请求多资源 - 一次请求可以获取多个相关资源；3) 强类型系统 - 提供更好的开发体验和错误检测；4) 自省功能 - 可以查询 API 结构本身；5) 版本无关 - 通过字段的添加和废弃来演进 API。"},{question:"如何解决 GraphQL 的 N+1 查询问题？",answer:"主要解决方案：1) 使用 DataLoader 进行批量加载和缓存；2) 在 Resolver 中实现智能的数据获取策略；3) 使用数据库的 JOIN 查询替代多次单独查询；4) 实现查询分析和优化；5) 使用缓存层减少重复的数据库访问。"},{question:"GraphQL 订阅是如何工作的？",answer:"GraphQL 订阅通过 WebSocket 或 Server-Sent Events 实现实时通信。工作流程：1) 客户端发送订阅请求建立持久连接；2) 服务器在数据变化时主动推送更新；3) 客户端接收并处理实时数据；4) 支持订阅的生命周期管理和错误处理；5) 可以实现复杂的订阅过滤和参数化。"},{question:"如何设计 GraphQL 的缓存策略？",answer:"缓存策略设计要点：1) 基于查询字符串和变量生成缓存键；2) 设置合适的 TTL 和失效策略；3) 实现变更操作后的相关缓存清理；4) 支持手动缓存控制和更新；5) 考虑分布式缓存和一致性问题；6) 监控缓存命中率和性能指标。"},{question:"GraphQL 有哪些安全考虑？",answer:"主要安全考虑：1) 查询复杂度限制 - 防止恶意的深度嵌套查询；2) 查询白名单 - 只允许预定义的查询；3) 速率限制 - 控制请求频率；4) 认证和授权 - 字段级别的权限控制；5) 输入验证 - 严格验证查询参数；6) 错误信息过滤 - 避免泄露敏感信息。"}],keyPoints:["GraphQL 提供了比 REST 更灵活和高效的数据获取方式","强类型系统和自省功能大大提升了开发体验","需要在服务端实现相应的优化策略来发挥 GraphQL 的优势","缓存策略的设计对 GraphQL 应用的性能至关重要","订阅功能为实时应用提供了强大的支持","安全性考虑在 GraphQL 应用中尤为重要","工具生态系统丰富，支持代码生成和开发调试"]},bestPractices:{dos:["使用强类型定义确保类型安全","实现适当的错误处理和用户反馈","利用缓存机制提升查询性能","使用 Fragment 提高查询复用性","实现查询复杂度限制防止滥用","监控 GraphQL 查询的性能指标","使用变量而不是字符串拼接构建查询","实现适当的认证和授权机制"],donts:["不要忽略 GraphQL 错误的处理","不要创建过于复杂的嵌套查询","不要在生产环境暴露 GraphQL Playground","不要忽略查询的安全性验证","不要过度依赖客户端缓存","不要忘记清理订阅连接","不要在查询中硬编码敏感信息","不要忽略 GraphQL Schema 的版本管理"],patterns:["使用 DataLoader 模式解决 N+1 查询问题","实现查询白名单模式提高安全性","使用联邦模式处理大型应用的复杂性","采用分层缓存策略优化性能","实现查询分析和监控模式","使用订阅过滤模式减少不必要的数据传输","采用渐进式迁移模式从 REST 过渡到 GraphQL","实现错误边界模式处理 GraphQL 异常"]}});export{z as default};
