var w=Object.defineProperty;var b=(s,t,i)=>t in s?w(s,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):s[t]=i;var d=(s,t,i)=>b(s,typeof t!="symbol"?t+"":t,i);import{r as u,j as e}from"./index-C7SuDyTR.js";import{C as j}from"./ComponentTemplate-BzrYXZsv.js";class N{constructor(t={}){d(this,"config");d(this,"queue",[]);d(this,"networkStatus",{online:navigator.onLine});d(this,"syncTimer");d(this,"listeners",new Set);d(this,"queueListeners",new Set);d(this,"stats",{queued:0,synced:0,failed:0,retries:0});d(this,"handleOnline",()=>{this.networkStatus.online=!0,this.notifyNetworkListeners(),this.config.autoSync&&this.syncQueue()});d(this,"handleOffline",()=>{this.networkStatus.online=!1,this.notifyNetworkListeners()});this.config={maxQueueSize:100,maxRetries:3,retryDelay:1e3,storageKey:"offline_requests",autoSync:!0,syncInterval:5e3,...t},this.initializeNetworkMonitoring(),this.loadQueue(),this.config.autoSync&&this.startAutoSync()}async enqueue(t){const i={id:this.generateId(),timestamp:Date.now(),retryCount:0,...t,maxRetries:t.maxRetries||this.config.maxRetries};return this.queue.length>=this.config.maxQueueSize&&(this.queue.sort((a,o)=>o.priority-a.priority),this.queue.pop()),this.queue.push(i),this.queue.sort((a,o)=>o.priority-a.priority),this.stats.queued++,await this.saveQueue(),this.notifyQueueListeners(),this.networkStatus.online&&this.syncQueue(),i.id}async dequeue(t){const i=this.queue.findIndex(a=>a.id===t);return i===-1?!1:(this.queue.splice(i,1),await this.saveQueue(),this.notifyQueueListeners(),!0)}getQueue(){return[...this.queue]}async clearQueue(){this.queue=[],await this.saveQueue(),this.notifyQueueListeners()}async syncQueue(){if(!this.networkStatus.online||this.queue.length===0)return;const t=[...this.queue];for(const i of t)try{await this.executeRequest(i),await this.dequeue(i.id),this.stats.synced++}catch(a){await this.handleRequestError(i,a)}}getNetworkStatus(){return{...this.networkStatus}}getStats(){return{...this.stats,queueSize:this.queue.length,online:this.networkStatus.online}}resetStats(){this.stats={queued:0,synced:0,failed:0,retries:0}}addNetworkListener(t){this.listeners.add(t)}removeNetworkListener(t){this.listeners.delete(t)}addQueueListener(t){this.queueListeners.add(t)}removeQueueListener(t){this.queueListeners.delete(t)}destroy(){this.syncTimer&&clearInterval(this.syncTimer),window.removeEventListener("online",this.handleOnline),window.removeEventListener("offline",this.handleOffline),this.listeners.clear(),this.queueListeners.clear()}initializeNetworkMonitoring(){if(window.addEventListener("online",this.handleOnline),window.addEventListener("offline",this.handleOffline),"connection"in navigator){const t=navigator.connection;t&&(this.updateNetworkInfo(t),t.addEventListener("change",()=>{this.updateNetworkInfo(t)}))}}updateNetworkInfo(t){this.networkStatus={...this.networkStatus,effectiveType:t.effectiveType,downlink:t.downlink,rtt:t.rtt},this.notifyNetworkListeners()}notifyNetworkListeners(){this.listeners.forEach(t=>{try{t(this.networkStatus)}catch(i){console.error("Network listener error:",i)}})}notifyQueueListeners(){this.queueListeners.forEach(t=>{try{t([...this.queue])}catch(i){console.error("Queue listener error:",i)}})}async executeRequest(t){const{url:i,method:a,headers:o,body:r}=t,c={method:a,headers:{"Content-Type":"application/json",...o}};r&&a!=="GET"&&a!=="HEAD"&&(c.body=typeof r=="string"?r:JSON.stringify(r));const l=await fetch(i,c);if(!l.ok)throw new Error(`HTTP ${l.status}: ${l.statusText}`);return l}async handleRequestError(t,i){if(t.retryCount++,this.stats.retries++,t.retryCount>=t.maxRetries)await this.dequeue(t.id),this.stats.failed++,console.error(`Request ${t.id} failed after ${t.retryCount} retries:`,i);else{const a=this.queue.findIndex(o=>o.id===t.id);a!==-1&&(this.queue[a]=t,await this.saveQueue())}}startAutoSync(){this.syncTimer=setInterval(()=>{this.networkStatus.online&&this.syncQueue()},this.config.syncInterval)}generateId(){return`${Date.now()}_${Math.random().toString(36).substr(2,9)}`}async saveQueue(){try{localStorage.setItem(this.config.storageKey,JSON.stringify(this.queue))}catch(t){console.error("Failed to save offline queue:",t)}}loadQueue(){try{const t=localStorage.getItem(this.config.storageKey);t&&(this.queue=JSON.parse(t),this.notifyQueueListeners())}catch(t){console.error("Failed to load offline queue:",t),this.queue=[]}}}const S=({manager:s})=>{const[t,i]=u.useState(s.getNetworkStatus());u.useEffect(()=>{const r=c=>{i(c)};return s.addNetworkListener(r),()=>s.removeNetworkListener(r)},[s]);const a=r=>r?"text-green-600":"text-red-600",o=r=>r?"bg-green-100":"bg-red-100";return e.jsxs("div",{className:`p-4 rounded-lg ${o(t.online)}`,children:[e.jsxs("div",{className:"flex items-center space-x-2 mb-2",children:[e.jsx("div",{className:`w-3 h-3 rounded-full ${t.online?"bg-green-500":"bg-red-500"}`}),e.jsx("span",{className:`font-medium ${a(t.online)}`,children:t.online?"在线":"离线"})]}),t.online&&e.jsxs("div",{className:"text-sm space-y-1",children:[t.effectiveType&&e.jsxs("div",{children:["连接类型: ",t.effectiveType]}),t.downlink&&e.jsxs("div",{children:["下行速度: ",t.downlink," Mbps"]}),t.rtt&&e.jsxs("div",{children:["往返时间: ",t.rtt," ms"]})]})]})},k=()=>{const[s]=u.useState(()=>new N),[t,i]=u.useState([]),[a,o]=u.useState(s.getStats()),[r,c]=u.useState({url:"https://jsonplaceholder.typicode.com/posts",method:"POST",priority:1,maxRetries:3,body:{title:"Test Post",body:"Test content",userId:1}}),l=u.useCallback(()=>{i(s.getQueue()),o(s.getStats())},[s]);u.useEffect(()=>{s.addQueueListener(l);const n=setInterval(()=>{o(s.getStats())},1e3);return l(),()=>{s.removeQueueListener(l),clearInterval(n),s.destroy()}},[s,l]);const h=async()=>{try{await s.enqueue({url:r.url,method:r.method,priority:r.priority,maxRetries:r.maxRetries,body:r.body}),l()}catch(n){console.error("Failed to add request:",n)}},x=async()=>{try{await s.syncQueue(),l()}catch(n){console.error("Failed to sync queue:",n)}},m=async()=>{try{await s.clearQueue(),l()}catch(n){console.error("Failed to clear queue:",n)}},f=async n=>{try{await s.dequeue(n),l()}catch(v){console.error("Failed to remove request:",v)}},p=()=>{s.resetStats(),o(s.getStats())},g=()=>{window.dispatchEvent(new Event("offline"))},y=()=>{window.dispatchEvent(new Event("online"))};return e.jsxs("div",{className:"space-y-6",children:[e.jsxs("div",{children:[e.jsx("h3",{className:"text-lg font-semibold mb-3",children:"网络状态"}),e.jsx(S,{manager:s}),e.jsxs("div",{className:"mt-3 space-x-2",children:[e.jsx("button",{onClick:g,className:"px-3 py-1 bg-red-500 text-white rounded text-sm hover:bg-red-600",children:"模拟离线"}),e.jsx("button",{onClick:y,className:"px-3 py-1 bg-green-500 text-white rounded text-sm hover:bg-green-600",children:"模拟上线"})]})]}),e.jsxs("div",{children:[e.jsx("h3",{className:"text-lg font-semibold mb-3",children:"统计信息"}),e.jsxs("div",{className:"grid grid-cols-2 md:grid-cols-5 gap-4",children:[e.jsxs("div",{className:"bg-blue-100 p-3 rounded",children:[e.jsx("div",{className:"text-sm text-blue-600",children:"队列中"}),e.jsx("div",{className:"text-xl font-bold text-blue-800",children:a.queueSize})]}),e.jsxs("div",{className:"bg-green-100 p-3 rounded",children:[e.jsx("div",{className:"text-sm text-green-600",children:"已同步"}),e.jsx("div",{className:"text-xl font-bold text-green-800",children:a.synced})]}),e.jsxs("div",{className:"bg-yellow-100 p-3 rounded",children:[e.jsx("div",{className:"text-sm text-yellow-600",children:"重试次数"}),e.jsx("div",{className:"text-xl font-bold text-yellow-800",children:a.retries})]}),e.jsxs("div",{className:"bg-red-100 p-3 rounded",children:[e.jsx("div",{className:"text-sm text-red-600",children:"失败"}),e.jsx("div",{className:"text-xl font-bold text-red-800",children:a.failed})]}),e.jsxs("div",{className:"bg-purple-100 p-3 rounded",children:[e.jsx("div",{className:"text-sm text-purple-600",children:"总入队"}),e.jsx("div",{className:"text-xl font-bold text-purple-800",children:a.queued})]})]}),e.jsx("button",{onClick:p,className:"mt-3 px-3 py-1 bg-gray-500 text-white rounded text-sm hover:bg-gray-600",children:"重置统计"})]}),e.jsxs("div",{children:[e.jsx("h3",{className:"text-lg font-semibold mb-3",children:"添加离线请求"}),e.jsxs("div",{className:"space-y-3",children:[e.jsxs("div",{children:[e.jsx("label",{className:"block text-sm font-medium mb-1",children:"URL"}),e.jsx("input",{type:"text",value:r.url,onChange:n=>c({...r,url:n.target.value}),className:"w-full p-2 border rounded",placeholder:"请求URL"})]}),e.jsxs("div",{className:"grid grid-cols-2 md:grid-cols-3 gap-3",children:[e.jsxs("div",{children:[e.jsx("label",{className:"block text-sm font-medium mb-1",children:"方法"}),e.jsxs("select",{value:r.method,onChange:n=>c({...r,method:n.target.value}),className:"w-full p-2 border rounded",children:[e.jsx("option",{value:"GET",children:"GET"}),e.jsx("option",{value:"POST",children:"POST"}),e.jsx("option",{value:"PUT",children:"PUT"}),e.jsx("option",{value:"DELETE",children:"DELETE"})]})]}),e.jsxs("div",{children:[e.jsx("label",{className:"block text-sm font-medium mb-1",children:"优先级"}),e.jsx("input",{type:"number",value:r.priority,onChange:n=>c({...r,priority:parseInt(n.target.value)}),className:"w-full p-2 border rounded",min:"1",max:"10"})]}),e.jsxs("div",{children:[e.jsx("label",{className:"block text-sm font-medium mb-1",children:"最大重试"}),e.jsx("input",{type:"number",value:r.maxRetries,onChange:n=>c({...r,maxRetries:parseInt(n.target.value)}),className:"w-full p-2 border rounded",min:"0",max:"10"})]})]}),e.jsx("button",{onClick:h,className:"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600",children:"添加到队列"})]})]}),e.jsxs("div",{children:[e.jsxs("div",{className:"flex justify-between items-center mb-3",children:[e.jsxs("h3",{className:"text-lg font-semibold",children:["离线队列 (",t.length,")"]}),e.jsxs("div",{className:"space-x-2",children:[e.jsx("button",{onClick:x,className:"px-3 py-1 bg-green-500 text-white rounded text-sm hover:bg-green-600",disabled:!a.online||t.length===0,children:"手动同步"}),e.jsx("button",{onClick:m,className:"px-3 py-1 bg-red-500 text-white rounded text-sm hover:bg-red-600",disabled:t.length===0,children:"清空队列"})]})]}),t.length===0?e.jsx("div",{className:"text-center py-8 text-gray-500",children:"队列为空"}):e.jsx("div",{className:"space-y-2",children:t.map(n=>e.jsx("div",{className:"border rounded p-3 bg-white shadow-sm",children:e.jsxs("div",{className:"flex justify-between items-start",children:[e.jsxs("div",{className:"flex-1",children:[e.jsxs("div",{className:"flex items-center space-x-2 mb-1",children:[e.jsx("span",{className:"font-medium",children:n.method}),e.jsx("span",{className:"text-sm text-gray-600",children:n.url}),e.jsxs("span",{className:"px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded",children:["优先级: ",n.priority]})]}),e.jsxs("div",{className:"text-sm text-gray-500 space-x-4",children:[e.jsxs("span",{children:["重试: ",n.retryCount,"/",n.maxRetries]}),e.jsxs("span",{children:["时间: ",new Date(n.timestamp).toLocaleTimeString()]})]}),n.body&&e.jsxs("div",{className:"mt-2 text-sm",children:[e.jsx("span",{className:"text-gray-600",children:"请求体: "}),e.jsx("code",{className:"bg-gray-100 px-1 rounded",children:JSON.stringify(n.body)})]})]}),e.jsx("button",{onClick:()=>f(n.id),className:"ml-3 px-2 py-1 bg-red-100 text-red-600 rounded text-sm hover:bg-red-200",children:"移除"})]})},n.id))})]})]})},R=()=>e.jsx(j,{title:"离线请求处理",description:"学习如何在网络不稳定或离线状态下处理HTTP请求，实现请求队列、自动重试和数据同步功能。",overview:[{title:"核心概念",items:["离线请求队列：在网络不可用时将请求存储在本地队列中","自动同步：网络恢复时自动执行队列中的请求","重试机制：失败请求的智能重试策略","优先级管理：根据请求重要性进行优先级排序","持久化存储：使用localStorage保存离线队列"]},{title:"主要优势",items:["提升用户体验：离线状态下仍可进行操作","数据一致性：确保所有操作最终都能同步到服务器","智能重试：避免因临时网络问题导致的操作失败","资源优化：合理管理网络请求，避免重复操作","状态透明：实时显示网络状态和同步进度"]},{title:"适用场景",items:["移动应用：网络信号不稳定的环境","表单提交：重要数据的可靠提交","批量操作：大量数据的分批处理","实时同步：多设备间的数据同步","离线优先：PWA应用的离线功能"]},{title:"注意事项",items:["存储限制：localStorage有容量限制","数据冲突：离线期间可能产生的数据冲突","安全考虑：敏感数据的本地存储安全","性能影响：大量队列项目对性能的影响","用户提示：清晰的离线状态和同步进度提示"]}],examples:[{title:"离线请求队列管理",component:e.jsx(k,{}),description:"演示完整的离线请求处理流程，包括网络状态监控、请求队列管理、自动同步等功能。",observationPoints:["观察网络状态指示器的实时变化","在离线状态下添加请求，查看队列变化","网络恢复时观察自动同步过程","查看统计信息了解队列处理情况","测试不同优先级请求的处理顺序"],keyPoints:["OfflineRequestManager类管理整个离线请求生命周期","使用事件监听器实时监控网络状态变化","localStorage提供持久化存储支持","优先级队列确保重要请求优先处理","智能重试机制处理临时网络故障"],commonTraps:["忘记处理localStorage容量限制","没有正确清理事件监听器导致内存泄漏","重试机制过于激进导致服务器压力","缺少用户反馈导致操作状态不明确","没有考虑数据冲突的处理策略"],solutions:["实现队列大小限制和LRU淘汰策略","在组件卸载时正确清理所有监听器","使用指数退避算法控制重试频率","提供清晰的UI反馈和进度指示","设计合理的冲突解决机制"],importantTips:["离线队列应该有合理的大小限制，避免占用过多存储空间","网络状态检测不仅要监听online/offline事件，还要考虑网络质量","重试策略应该区分不同类型的错误，避免无意义的重试","用户界面应该清晰显示离线状态和同步进度","考虑实现请求去重，避免重复提交相同的操作"]}],tutorial:{concepts:["离线请求队列：将无法立即执行的请求存储在本地队列中，等待网络恢复后执行","网络状态监控：实时监控网络连接状态，包括在线/离线状态和网络质量信息","自动同步机制：网络恢复时自动执行队列中的待处理请求","重试策略：对失败的请求实施智能重试，包括重试次数限制和退避算法","优先级管理：根据请求的重要性分配优先级，确保重要操作优先执行","持久化存储：使用localStorage等本地存储技术保存离线队列","事件驱动架构：使用观察者模式实现组件间的状态同步"],steps:["创建OfflineRequestManager类管理离线请求队列","实现网络状态监控，监听online/offline事件","设计请求队列数据结构，包含优先级和重试信息","实现enqueue方法将请求添加到队列","实现dequeue方法从队列中移除请求","添加自动同步机制，网络恢复时执行队列请求","实现重试策略，处理失败的请求","添加持久化存储，保存队列到localStorage","创建事件监听器系统，实现状态变化通知","实现统计功能，跟踪队列处理情况"],tips:["使用WeakMap或Set管理事件监听器，避免内存泄漏","实现请求去重机制，避免重复提交相同操作","考虑使用IndexedDB替代localStorage处理大量数据","实现请求优先级队列，确保重要操作优先执行","添加请求超时机制，避免长时间等待","使用指数退避算法控制重试间隔","提供丰富的事件回调，方便UI组件响应状态变化","考虑实现请求合并，减少网络请求数量"]},interview:{questions:[{question:"如何实现一个可靠的离线请求队列？",answer:"实现离线请求队列需要考虑：1) 使用localStorage或IndexedDB持久化存储队列；2) 监听网络状态变化事件；3) 实现优先级队列确保重要请求优先处理；4) 设计重试机制处理失败请求；5) 实现队列大小限制避免存储溢出；6) 提供事件回调机制让UI组件响应状态变化。"},{question:"离线请求的重试策略应该如何设计？",answer:"重试策略设计要点：1) 区分错误类型，网络错误可重试，业务错误不重试；2) 使用指数退避算法控制重试间隔；3) 设置最大重试次数避免无限重试；4) 考虑请求优先级，重要请求可以有更多重试机会；5) 实现重试计数和统计，便于监控和调试；6) 提供手动重试选项给用户更多控制权。"},{question:"如何处理离线期间可能产生的数据冲突？",answer:"数据冲突处理策略：1) 使用时间戳或版本号检测冲突；2) 实现乐观锁机制，提交时检查数据版本；3) 提供冲突解决选项：覆盖、合并或用户选择；4) 设计幂等性API，避免重复操作的副作用；5) 实现数据快照，记录操作前的状态；6) 提供冲突通知机制，让用户了解并处理冲突。"},{question:"离线请求队列的性能优化有哪些方法？",answer:"性能优化方法：1) 实现队列大小限制和LRU淘汰策略；2) 使用批量操作减少存储I/O次数；3) 实现请求合并，将相似请求合并处理；4) 使用Web Workers处理队列操作，避免阻塞主线程；5) 实现增量同步，只同步变更的数据；6) 使用压缩算法减少存储空间占用；7) 实现懒加载，按需加载队列数据。"}],keyPoints:["离线请求队列是PWA应用的核心功能之一","网络状态监控不仅要检测连接状态，还要考虑网络质量","重试策略需要平衡用户体验和服务器压力","持久化存储的选择影响应用的可靠性和性能","事件驱动架构是实现响应式UI的关键","数据冲突处理是离线应用必须考虑的问题","性能优化需要在功能完整性和资源消耗间找到平衡"]},bestPractices:{dos:["实现合理的队列大小限制，避免存储溢出","使用事件监听器实现响应式的状态更新","提供清晰的用户反馈，显示离线状态和同步进度","实现智能重试策略，区分不同类型的错误","使用优先级队列确保重要操作优先执行","正确清理事件监听器，避免内存泄漏","实现请求去重机制，避免重复操作","提供手动同步选项，给用户更多控制权"],donts:["不要无限制地增加队列大小","不要忽略网络质量信息，仅依赖在线/离线状态","不要对所有错误都进行重试","不要在重试时使用固定间隔，应该使用退避算法","不要忘记处理数据冲突的情况","不要在localStorage中存储敏感信息","不要阻塞主线程进行大量队列操作","不要缺少用户反馈和状态提示"],patterns:["观察者模式：实现事件驱动的状态管理","队列模式：管理待处理的请求序列","重试模式：处理临时失败的操作","策略模式：实现不同的冲突解决策略","工厂模式：创建不同类型的请求对象","单例模式：确保全局唯一的队列管理器","命令模式：封装请求操作为可执行的命令","状态模式：管理网络连接的不同状态"]}});export{R as default};
